<%- include("../../views/partials/user/header") %>
<style>
    :root {
        --black: #000;
        --white: #fff;
        --gray-100: #f8f9fa;
        --gray-200: #e9ecef;
        --gray-300: #dee2e6;
        --gray-600: #6c757d;
        --gray-800: #343a40;
        --transition: all 0.3s ease;
        --shadow: 0 2px 15px rgba(0, 0, 0, 0.05);
    }

    .shop-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 2rem;
        background: var(--white);
    }

    /* Header */
    .shop-header {
        text-align: center;
        margin-bottom: 3rem;
        padding: 2rem 0;
        border-bottom: 1px solid var(--gray-200);
    }

    .shop-title {
        font-size: 2rem;
        font-weight: 300;
        letter-spacing: 4px;
        text-transform: uppercase;
        margin-bottom: 0.5rem;
        color: var(--black);
    }

    /* Search and Sort */
    .controls-wrapper {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding: 1rem;
        background: var(--gray-100);
        border-radius: 8px;
    }

    .search-form {
        flex: 1;
        max-width: 300px;
        position: relative;
    }

    .search-input {
        width: 100%;
        padding: 0.8rem 1rem;
        border: 1px solid var(--gray-300);
        border-radius: 4px;
        font-size: 0.9rem;
        transition: var(--transition);
    }

    .search-input:focus {
        outline: none;
        border-color: var(--black);
    }

    .search-button {
        position: absolute;
        right: 0;
        top: 0;
        height: 100%;
        padding: 0 1.2rem;
        background: var(--black);
        color: var(--white);
        border: none;
        border-radius: 0 4px 4px 0;
        cursor: pointer;
        transition: var(--transition);
    }

    .sort-wrapper {
        position: relative;
    }

    .sort-select {
        padding: 0.8rem 2.5rem 0.8rem 1rem;
        border: 1px solid var(--gray-300);
        border-radius: 4px;
        background: var(--white);
        font-size: 0.9rem;
        cursor: pointer;
        appearance: none;
        min-width: 200px;
        transition: var(--transition);
    }

    .sort-select:focus {
        outline: none;
        border-color: var(--black);
    }

    .sort-wrapper::after {
        content: '↓';
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        pointer-events: none;
    }

    /* Main Layout */
    .shop-layout {
        display: grid;
        grid-template-columns: 220px 1fr;
        gap: 2rem;
    }

    /* Sidebar */
    .sidebar {
        background: var(--gray-100);
        padding: 1.5rem;
        border-radius: 8px;
        height: fit-content;
    }

    .filter-section {
        margin-bottom: 2rem;
    }

    .filter-title {
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 1px;
        color: var(--gray-800);
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid var(--gray-300);
    }

    .filter-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .filter-item {
        margin: 0.5rem 0;
    }

    .filter-link {
        color: var(--gray-600);
        text-decoration: none;
        font-size: 0.9rem;
        transition: var(--transition);
        display: block;
        padding: 0.3rem 0;
    }

    .filter-link:hover {
        color: var(--black);
    }

    .price-button {
        width: 100%;
        padding: 0.7rem 1rem;
        margin: 0.3rem 0;
        background: var(--white);
        border: 1px solid var(--gray-300);
        border-radius: 4px;
        text-align: left;
        font-size: 0.9rem;
        color: var(--gray-600);
        cursor: pointer;
        transition: var(--transition);
    }

    .price-button:hover {
        background: var(--black);
        color: var(--white);
        border-color: var(--black);
    }

    /* Product Grid */
    .product-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
        gap: 1.5rem;
    }

    .product-card {
        background: var(--white);
        border: 1px solid var(--gray-200);
        border-radius: 8px;
        overflow: hidden;
        transition: var(--transition);
        position: relative;
    }

    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: var(--shadow);
    }

    .product-image {
        position: relative;
        padding-top: 100%;
        background: var(--gray-100);
    }

    .product-image img {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: contain;
        padding: 1rem;
    }

    .wishlist-btn {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        background: var(--white);
        border: none;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        box-shadow: var(--shadow);
        transition: var(--transition);
        z-index: 1;
    }

    .wishlist-btn:hover {
        transform: scale(1.1);
    }

    .product-info {
        padding: 1rem;
    }

    .product-name {
        font-size: 0.9rem;
        color: var(--black);
        margin-bottom: 0.5rem;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .price-info {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .sale-price {
        font-size: 1rem;
        font-weight: 500;
        color: var(--black);
    }

    .regular-price {
        font-size: 0.8rem;
        color: var(--gray-600);
        text-decoration: line-through;
    }

    .add-to-cart-btn {
        width: 100%;
        padding: 0.8rem;
        background: var(--black);
        color: var(--white);
        border: none;
        border-radius: 4px;
        font-size: 0.9rem;
        cursor: pointer;
        transition: var(--transition);
    }

    .add-to-cart-btn:hover {
        background: var(--gray-800);
    }

    /* Pagination */
    .pagination {
        display: flex;
        justify-content: center;
        gap: 0.5rem;
        margin-top: 3rem;
    }

    .page-link {
        padding: 0.5rem 1rem;
        border: 1px solid var(--gray-300);
        color: var(--gray-600);
        text-decoration: none;
        border-radius: 4px;
        transition: var(--transition);
    }

    .page-link:hover,
    .page-link.active {
        background: var(--black);
        color: var(--white);
        border-color: var(--black);
    }

    @media (max-width: 768px) {
        .controls-wrapper {
            flex-direction: column;
            gap: 1rem;
        }

        .search-form {
            max-width: 100%;
        }

        .shop-layout {
            grid-template-columns: 1fr;
        }

        .product-grid {
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        }
    }
</style>

<div class="shop-container">
    <!-- <header class="shop-header">
        <h1 class="shop-title">Shop</h1>
    </header> -->

    <div class="controls-wrapper">
        <form class="search-form" action="/shop" method="GET">
            <input type="text" name="search" class="search-input" placeholder="Search products..." value="<%= query?.search || '' %>">
            <button type="submit" class="search-button">Search</button>
        </form>

        <div class="sort-wrapper">
            <select class="sort-select" id="sortSelect">
                <option value="popularity">Sort by Popularity</option>
                <option value="price-low">Price: Low to High</option>
                <option value="price-high">Price: High to Low</option>
                <option value="rating">Average Rating</option>
                <option value="featured">Featured</option>
                <option value="new">New Arrivals</option>
                <option value="name-asc">Name: A to Z</option>
                <option value="name-desc">Name: Z to A</option>
            </select>
        </div>
    </div>

    <div class="shop-layout">
        <aside class="sidebar">
            <div class="filter-section">
                <h3 class="filter-title">Categories</h3>
                <ul class="filter-list">
                    <% for(let i=0; i<categories.length; i++) { %>
                        <li class="filter-item">
                            <a href="/shop?category=<%=categories[i].name%>" class="filter-link">
                                <%=categories[i].name%>
                            </a>
                        </li>
                    <% } %>
                </ul>
            </div>

            
        </aside>

        <main class="product-grid">
            <% if (products && products.length > 0) { %>
                <% products.forEach(function(product) { %>
                    <div class="product-card">
                        <div class="product-image">
                            <button class="wishlist-btn">❤️</button>
                            <a href="/product/<%= product._id %>">
                                <img src="/uploads/product-images/<%=product.productImage[0]%>" alt="<%=product.productName%>" />
                            </a>
                        </div>
                        <div class="product-info">
                            <h3 class="product-name"><%=product.productName%></h3>
                            <div class="price-info">
                                <span class="sale-price">₹<%=product.salePrice.toLocaleString('en-IN')%></span>
                                <span class="regular-price">₹<%=product.regularPrice.toLocaleString('en-IN')%></span>
                            </div>
                            <button class="add-to-cart-btn" onclick="addToCart('<%=product._id%>')">Add to Cart</button>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="no-products">
                    <p>No products found.</p>
                </div>
            <% } %>
        </main>
    </div>

    <div class="pagination">
        <% if (currentPage > 1) { %>
            <a class="page-link" href="/shop?page=<%= currentPage - 1 %>">Previous</a>
        <% } %>

        <% for (let i = 1; i <= totalPages; i++) { %>
            <a class="page-link <%= currentPage === i ? 'active' : '' %>" href="/shop?page=<%= i %>"><%= i %></a>
        <% } %>

        <% if (currentPage < totalPages) { %>
            <a class="page-link" href="/shop?page=<%= currentPage + 1 %>">Next</a>
        <% } %>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const sortSelect = document.getElementById('sortSelect');
    
    // Set initial value from URL if exists
    const urlParams = new URLSearchParams(window.location.search);
    const currentSort = urlParams.get('sort');
    if (currentSort) {
        sortSelect.value = currentSort;
    }

    sortSelect.addEventListener('change', async function() {
        try {
            // Show loading state
            const productGrid = document.querySelector('.product-grid');
            if (productGrid) {
                productGrid.style.opacity = '0.5';
            }

            // Build the URL with current filters and new sort
            const url = new URL(window.location.href);
            url.searchParams.set('sort', this.value);
            
            // Keep existing filters
            if (urlParams.has('category')) {
                url.searchParams.set('category', urlParams.get('category'));
            }
            if (urlParams.has('search')) {
                url.searchParams.set('search', urlParams.get('search'));
            }
            if (urlParams.has('minPrice')) {
                url.searchParams.set('minPrice', urlParams.get('minPrice'));
            }
            if (urlParams.has('maxPrice')) {
                url.searchParams.set('maxPrice', urlParams.get('maxPrice'));
            }

            // Fetch sorted products
            const response = await fetch(url);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const html = await response.text();
            
            // Create a temporary container and parse the HTML
            const temp = document.createElement('div');
            temp.innerHTML = html;
            
            // Find the product grid content
            const newProducts = temp.querySelector('.product-grid');
            
            if (newProducts) {
                productGrid.innerHTML = newProducts.innerHTML;
                productGrid.style.opacity = '1';
                
                // Update URL without refreshing
                window.history.pushState({}, '', url);
            } else {
                throw new Error('Could not find product grid in response');
            }

        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Failed to sort products. Please try again.'
            });
            
            // Reset opacity
            const productGrid = document.querySelector('.product-grid');
            if (productGrid) {
                productGrid.style.opacity = '1';
            }
        }
    });
});

async function addToCart(productId) {
    try {
        const response = await fetch('/cart/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ productId: productId })
        });

        const data = await response.json();
        
        if (response.ok) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Product added to cart successfully!',
                showConfirmButton: false,
                timer: 1500
            });
        } else {
            throw new Error(data.message || 'Failed to add product to cart');
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: error.message || 'Something went wrong!'
        });
    }
}
</script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<%- include("../../views/partials/user/footer") %>
