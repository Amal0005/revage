<%- include("../../views/partials/user/header") %>
<style>
/* Main Container Alignment */
.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 15px;
}

.row {
    display: flex;
    flex-wrap: wrap;
    margin-right: -15px;
    margin-left: -15px;
}

.col-md-4, .col-md-8, .col-lg-6, .col-lg-8, .col-lg-10 {
    padding-right: 15px;
    padding-left: 15px;
    position: relative;
    width: 100%;
}

.m-auto {
    margin: auto !important;
}

/* Specific Column Widths */
.col-md-4 {
    flex: 0 0 33.333333%;
    max-width: 33.333333%;
}

.col-md-8 {
    flex: 0 0 66.666667%;
    max-width: 66.666667%;
}

.col-lg-6 {
    flex: 0 0 50%;
    max-width: 50%;
}

.col-lg-10 {
    flex: 0 0 83.333333%;
    max-width: 83.333333%;
}

/* Dashboard Menu */
.dashboard-menu {
    background: #f5f5f5;
    border: 1px solid #ddd;
    box-shadow: 0 0 20px rgba(0,0,0,0.05);
    margin-bottom: 30px;
    height: 100%;
}

.dashboard-menu ul {
    list-style: none;
    padding: 20px;
    margin: 0;
}

.dashboard-menu .nav-item {
    margin-bottom: 10px;
}

.dashboard-menu .nav-link {
    display: flex;
    align-items: center;
    padding: 12px 20px;
    color: #000;
    text-decoration: none;
    border-radius: 8px;
    transition: all 0.3s ease;
    border-left: 3px solid transparent;
}

.dashboard-menu .nav-link:hover {
    background: #eee;
    border-left-color: #000;
}

.dashboard-menu .nav-link.active {
    background: #eee;
    border-left-color: #000;
    color: #000;
}

.dashboard-menu .nav-link i {
    margin-right: 10px;
    width: 20px;
    text-align: center;
}

/* Dashboard Content */
.dashboard-content {
    background: #f5f5f5;
    border: 1px solid #ddd;
    box-shadow: 0 5px 15px rgba(0,0,0,0.05);
}

.tab-content {
    padding: 20px;
}

/* Card Layouts */
.card {
    margin-bottom: 30px;
    border: none;
    border-radius: 15px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.05);
    background: #f5f5f5;
    border: 1px solid #ddd;
}

.card-header {
    padding: 20px;
    background: #eee;
    color: #000;
    border-radius: 15px 15px 0 0;
    border-bottom: 1px solid #ddd;
}

.card-body {
    padding: 20px;
    background: #f5f5f5;
}

/* Profile Section */
.card-green {
    text-align: center;
    border: 1px solid #ddd;
}

.card-green .card-body {
    padding: 30px 20px;
}

.card-title {
    margin-bottom: 20px;
}

.card-text {
    margin-bottom: 15px;
}

/* Address Section */
.address-card {
    height: 100%;
    background: #f5f5f5;
    border: 1px solid #ddd;
}

.address-card .card-body {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    height: 100%;
}

/* Table Layout */
.table-responsive {
    margin: 0;
}

.table {
    width: 100%;
    margin-bottom: 0;
    color: #000;
}

.table th {
    padding: 15px;
    border-top: none;
    background: #eee;
    color: #000;
    border-color: #ddd;
}

.table td {
    padding: 15px;
    vertical-align: middle;
    background: #f5f5f5;
    border-color: #ddd;
}

.table tr:hover td {
    background: #eee;
}

/* Button Alignment */
.btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 8px 20px;
    border-radius: 8px;
    margin: 5px;
    background: #eee;
    color: #000;
    border: 1px solid #ddd;
    transition: all 0.3s ease;
}

.btn:hover {
    background: #000;
    color: #fff;
    transform: translateY(-2px);
}

.btn-success {
    background: #eee;
    border-color: #000;
}

.btn-success:hover {
    background: #000;
    color: #fff;
}

.d-flex {
    display: flex !important;
}

.justify-content-between {
    justify-content: space-between !important;
}

/* Wallet Section */
.wallet-section {
    text-align: center;
    padding: 30px 20px;
    background: #f5f5f5;
}

.form-group {
    margin-bottom: 20px;
    text-align: center;
}

.h3, .h4 {
    color: #000;
}

/* Media Queries for Responsive Layout */
@media (max-width: 768px) {
    .col-md-4, .col-md-8 {
        flex: 0 0 100%;
        max-width: 100%;
    }
    
    .dashboard-menu {
        margin-bottom: 30px;
    }
    
    .card {
        margin-bottom: 20px;
    }
}

@media (max-width: 576px) {
    .container {
        padding: 0 10px;
    }
    
    .card-body {
        padding: 15px;
    }
    
    .table th, .table td {
        padding: 10px;
    }
}

/* Utility Classes */
.text-center {
    text-align: center !important;
}

.mb-0 {
    margin-bottom: 0 !important;
}

.mb-3 {
    margin-bottom: 1rem !important;
}

.mt-90 {
    margin-top: 90px !important;
}

.mx-auto {
    margin-left: auto !important;
    margin-right: auto !important;
}

.w-70 {
    width: 70% !important;
}

/* Animation */
.tab-pane.fade {
    transition: opacity 0.15s linear;
}

.tab-pane.fade.show {
    opacity: 1;
}

/* Active States */
.nav-link.active {
    background: #eee;
    border-left-color: #000;
    color: #000;
}

.tab-pane.active {
    display: block;
}

/* Profile Image Styles */
.profile-image-container {
    position: relative;
    width: 150px;
    height: 150px;
    margin: 0 auto 20px;
    border-radius: 50%;
    overflow: hidden;
    border: 3px solid #000;
    box-shadow: 0 0 20px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
}

.profile-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
}

.image-upload-overlay {
    position: absolute;
    bottom: -100%;
    left: 0;
    width: 100%;
    padding: 10px;
    background: rgba(255,255,255,0.9);
    transition: bottom 0.3s ease;
    text-align: center;
}

.profile-image-container:hover .image-upload-overlay {
    bottom: 0;
}

.profile-image-container:hover .profile-image {
    transform: scale(1.1);
}

.file-input {
    display: none;
}

.upload-label {
    color: #000;
    cursor: pointer;
    font-size: 0.9rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 5px;
}

.upload-label i {
    font-size: 1.2rem;
}

.upload-label:hover {
    color: #333;
}

.upload-form {
    margin: 0;
}

body {
    background: #fff;
    color: #000;
}

input, select, textarea {
    background: #eee;
    border: 1px solid #ddd;
    color: #000;
}

input:focus, select:focus, textarea:focus {
    background: #fff;
    border-color: #000;
    color: #000;
}

/* Custom Scrollbar */
::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #f5f5f5;
}

::-webkit-scrollbar-thumb {
    background: #ddd;
    border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
    background: #ccc;
}

/* Hover Effects */
.nav-link:hover i {
    transform: translateX(5px);
    transition: transform 0.3s ease;
}

.card-green {
    border: 1px solid #ddd;
}

.card-green .card-header {
    background: #eee;
}

/* Animation */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

.card {
    animation: fadeIn 0.5s ease-out;
}

/* Form Elements */
.form-group label {
    color: #000;
}

.form-control {
    background: #eee;
    border: 1px solid #ddd;
    color: #000;
}

.form-control:focus {
    background: #fff;
    border-color: #000;
    color: #000;
    box-shadow: 0 0 0 0.2rem rgba(0,0,0,0.1);
}

/* Address Card */
.address-card {
    background: #f5f5f5;
    border: 1px solid #ddd;
}

.btn-small {
    background: #eee;
    color: #000;
    border: 1px solid #ddd;
    padding: 5px 15px;
    border-radius: 4px;
    text-decoration: none;
}

.btn-small:hover {
    background: #000;
    color: #fff;
}

/* Wallet Section */
.wallet-section {
    background: #f5f5f5;
}

/* Status Badges */
.badge {
    background: #eee;
    color: #000;
    padding: 5px 10px;
    border-radius: 4px;
}

/* Links */
a {
    color: #000;
    text-decoration: none;
}

a:hover {
    color: #333;
}

/* Utility Classes */
.text-muted {
    color: #666 !important;
}

.border-bottom {
    border-bottom: 1px solid #ddd !important;
}

/* Upload Overlay */
.image-upload-overlay {
    background: rgba(255,255,255,0.9);
}

.upload-label {
    color: #000;
}

.upload-label:hover {
    color: #333;
}

/* Dashboard Content */
.dashboard-content {
    background: #f5f5f5;
    border: 1px solid #ddd;
    box-shadow: 0 5px 15px rgba(0,0,0,0.05);
}

/* Active States */
.nav-link.active {
    background: #eee;
    color: #000;
    font-weight: bold;
}

/* Container Backgrounds */
.container-fluid {
    background: #fff;
}

/* Table Striped */
.table-striped tbody tr:nth-of-type(odd) {
    background-color: #f8f8f8;
}

/* Form Focus States */
.form-control:focus {
    border-color: #000;
    box-shadow: 0 0 0 0.2rem rgba(0,0,0,0.1);
}

/* Button Groups */
.btn-group {
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

/* Card Footer */
.card-footer {
    background: #f8f8f8;
    border-top: 1px solid #ddd;
}

/* Breadcrumb Styles */
.breadcrumb-wrapper {
    background: #f8f8f8;
    border-bottom: 1px solid #ddd;
    padding: 15px 0;
    margin-bottom: 30px;
}

.breadcrumb {
    display: flex;
    align-items: center;
    padding: 0;
    margin: 0;
    list-style: none;
    font-size: 14px;
}

.breadcrumb-item {
    display: flex;
    align-items: center;
}

.breadcrumb-item a {
    color: #666;
    text-decoration: none;
    transition: color 0.3s ease;
}

.breadcrumb-item a:hover {
    color: #000;
}

.breadcrumb-item + .breadcrumb-item {
    padding-left: 10px;
}

.breadcrumb-item + .breadcrumb-item::before {
    content: '/';
    display: inline-block;
    padding-right: 10px;
    color: #999;
}

.breadcrumb-item.active {
    color: #000;
    font-weight: 500;
}

.breadcrumb-icon {
    margin-right: 5px;
    font-size: 12px;
}

/* Orders Section Styles */
.orders-section {
    padding: 20px;
}

.order-card {
    background: #fff;
    border: 1px solid #e5e5e5;
    margin-bottom: 20px;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.order-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}

.order-header {
    padding: 20px;
    background: #f8f9fa;
    border-bottom: 1px solid #e5e5e5;
}

.order-header-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
}

.order-info-item {
    display: flex;
    flex-direction: column;
}

.order-info-label {
    font-size: 0.75rem;
    text-transform: uppercase;
    color: #6c757d;
    margin-bottom: 4px;
    letter-spacing: 0.5px;
}

.order-info-value {
    font-size: 1rem;
    color: #212529;
    font-weight: 500;
}

.order-body {
    padding: 20px;
}

.order-products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 20px;
    margin-bottom: 20px;
}

.product-card {
    display: flex;
    align-items: center;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 8px;
    border: 1px solid #e5e5e5;
}

.product-image {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: 8px;
    margin-right: 15px;
}

.product-details {
    flex: 1;
}

.product-name {
    font-weight: 500;
    color: #212529;
    margin-bottom: 5px;
    font-size: 1rem;
}

.product-meta {
    font-size: 0.875rem;
    color: #6c757d;
}

.order-footer {
    padding: 20px;
    background: #f8f9fa;
    border-top: 1px solid #e5e5e5;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.order-total {
    font-size: 1.25rem;
    font-weight: 600;
    color: #212529;
}

.order-actions {
    display: flex;
    gap: 10px;
}

.btn-order {
    padding: 8px 16px;
    border-radius: 6px;
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 0.3s ease;
}

.btn-view {
    background: #000;
    color: #fff;
    border: none;
}

.btn-view:hover {
    background: #333;
}

.btn-cancel {
    background: #fff;
    color: #dc3545;
    border: 1px solid #dc3545;
}

.btn-cancel:hover {
    background: #dc3545;
    color: #fff;
}

.status-badge {
    display: inline-flex;
    align-items: center;
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.status-pending {
    background: #fff3cd;
    color: #856404;
    border: 1px solid #ffeeba;
}

.status-processing {
    background: #cce5ff;
    color: #004085;
    border: 1px solid #b8daff;
}

.status-shipped {
    background: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.status-delivered {
    background: #d1e7dd;
    color: #0f5132;
    border: 1px solid #badbcc;
}

.status-cancelled {
    background: #f8d7da;
    color: #842029;
    border: 1px solid #f5c2c7;
}

@media (max-width: 768px) {
    .order-header-grid {
        grid-template-columns: 1fr;
        gap: 15px;
    }

    .order-products-grid {
        grid-template-columns: 1fr;
    }

    .order-footer {
        flex-direction: column;
        gap: 15px;
        text-align: center;
    }

    .order-actions {
        width: 100%;
        justify-content: center;
    }
}
</style>
</head>
<body>
   
<section class="pt-10 pb-10">
    <!-- Breadcrumb Section -->
    <div class="breadcrumb-wrapper">
        <div class="container">
            <ul class="breadcrumb">
                <li class="breadcrumb-item">
                    <a href="/">
                        <i class="fi-rs-home breadcrumb-icon"></i>
                        Home
                    </a>
                </li>
                <li class="breadcrumb-item">
                    <a href="/user">Account</a>
                </li>
                <li class="breadcrumb-item active" id="current-page">Dashboard</li>
            </ul>
        </div>
    </div>

    <div class="container">
     <div class="row">
       <div class="col-lg-10 m-auto">
         <div class="row">
           <div class="col-md-4">
             <div class="dashboard-menu">
               <ul class="nav flex-column" role="tablist">
                 <li class="nav-item">
                   <a class="nav-link active" id="dashboard-tab" data-bs-toggle="tab" href="#dashboard" role="tab" aria-controls="dashboard" aria-selected="false">
                     <i class="fi-rs-settings-sliders mr-10"></i>Dashboard
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="address-tab" data-bs-toggle="tab" href="#address" role="tab" aria-controls="address" aria-selected="true">
                     <i class="fi-rs-marker mr-10"></i>My Address
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="orders-tab" data-bs-toggle="tab" href="#orders" role="tab" aria-controls="orders" aria-selected="false">
                     <i class="fi-rs-shopping-bag mr-10"></i>Orders
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="track-orders-tab" data-bs-toggle="tab" href="#track-orders" role="tab" aria-controls="track-orders" aria-selected="false">
                     <i class="fi-rs-shopping-cart-check mr-10"></i>Wallet Status
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="track-orders-tab" data-bs-toggle="tab" href="#wallet-history" role="tab" aria-controls="track-orders" aria-selected="false">
                     <i class="fi-rs-shopping-cart-check mr-10"></i>Wallet History
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="track-orders-tab" data-bs-toggle="tab" href="#referal" role="tab" aria-controls="track-orders" aria-selected="false">
                     <i class="fi-rs-shopping-cart-check mr-10"></i>Referals
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" href="/logout">
                     <i class="fi-rs-sign-out mr-10"></i>Logout
                   </a>
                 </li>
               </ul>
             </div>
           </div>
           <div class="col-md-8">
             <div class="tab-content dashboard-content">


               <div class="tab-pane fade show active" id="dashboard" role="tabpanel" aria-labelledby="dashboard-tab">
                 <div class="card card-green">
                   <div class="card-header">
                     <h5 class="mb-0 text-center">User Profile</h5>
                   </div>
                   <div class="card-body text-center">
                     <div class="profile-image-container mb-4">
                       <% if (user.image) { %>
                         <img src="/uploads/userimages" alt="User Profile" class="profile-image">
                       <% } else { %>
                         <img src="/images/default-avatar.png" alt="Default Profile" class="profile-image">
                       <% } %>
                       <div class="image-upload-overlay">
                         <form action="/upload-profile-image" method="POST" enctype="multipart/form-data" class="upload-form">
                           <input type="file" name="profileImage" id="profileImage" accept="image/*" class="file-input">
                           <label for="profileImage" class="upload-label">
                             <i class="fi-rs-camera"></i>
                             Change Photo
                           </label>
                         </form>
                       </div>
                     </div>
                     <div class="tab-pane fade show active" id="dashboard" role="tabpanel">
                      <form id="updateProfileForm">
                        <div class="mb-3">
                          <label for="name" class="form-label"><strong>Name:</strong></label>
                          <input type="text" id="name" name="name" class="form-control" value="<%= user.name %>" required>
                        </div>
                        <div class="mb-3">
                          <label for="phone" class="form-label"><strong>Phone:</strong></label>
                          <input type="text" id="phone" name="phone" class="form-control" value="<%= user.phone %>" required>
                        </div>
                        <div class="mb-3">
                          <label for="email" class="form-label"><strong>Email:</strong></label>
                          <input type="email" id="email" name="email" class="form-control" value="<%= user.email %>" readonly>
                        </div>
                      
                      
                        <div>
                        <a href="/change-password" class="btn btn-sm" style="background-color: black; color: white; padding: 8px 12px; text-decoration: none; border-radius: 5px; font-size: 14px; border: 1px solid white;">
                          Change Password
                        </a>
                        <button type="submit" class="btn btn-primary"  style="background-color: black; color: white; padding: 8px 12px; text-decoration: none; border-radius: 5px; font-size: 14px; border: 1px solid white;">
                          Save Changes
                        </button>
                      </div>
                      
                      
                        <div>
                          
                        </div>
                      </form>
                    </div>
                   </div>
                 </div>
               </div>


               <div
                 class="tab-pane fade"
                 id="address"
                 role="tabpanel"
                 aria-labelledby="address-tab"
               >
                 <div class="row">
                   <div class="col-12 mb-4">
                     <button class="btn btn-dark" onclick="showAddAddressForm()">
                       <i class="fi-rs-plus mr-10"></i>Add New Address
                     </button>
                   </div>

                   <!-- Address List -->
                   <% if (user.addresses && user.addresses.length > 0) { %>
                     <% user.addresses.forEach((address, index) => { %>
                       <div class="col-lg-6 mb-4">
                         <div class="card">
                           <div class="card-header">
                             <h5 class="mb-0">Address <%= index + 1 %></h5>
                           </div>
                           <div class="card-body">
                             <address>
                               <strong><%= address.name %></strong><br>
                               <%= address.houseName %><br>
                               <%= address.street %><br>
                               <%= address.city %>, <%= address.state %><br>
                               PIN: <%= address.pincode %><br>
                               Phone: <%= address.phone %>
                             </address>
                             <div class="d-flex justify-content-between mt-3">
                               <button class="btn btn-sm btn-outline-dark" onclick="editAddress('<%= index %>')">
                                 <i class="fi-rs-edit mr-5"></i>Edit
                               </button>
                               <button class="btn btn-sm btn-outline-danger" onclick="deleteAddress('<%= index %>')">
                                 <i class="fi-rs-trash mr-5"></i>Delete
                               </button>
                             </div>
                           </div>
                         </div>
                       </div>
                     <% }); %>
                   <% } else { %>
                     <div class="col-12">
                       <div class="card">
                         <div class="card-body text-center">
                           <p class="mb-0">No addresses added yet.</p>
                         </div>
                       </div>
                     </div>
                   <% } %>
                 </div>

                 <!-- Add Address Form Modal -->
                 <div class="modal fade" id="addAddressModal" tabindex="-1">
                   <div class="modal-dialog">
                     <div class="modal-content">
                       <div class="modal-header">
                         <h5 class="modal-title">Add New Address</h5>
                         <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                       </div>
                       <div class="modal-body">
                         <form id="addAddressForm">
                           <div class="mb-3">
                             <label class="form-label">Full Name</label>
                             <input type="text" class="form-control" name="name" required>
                           </div>
                           <div class="mb-3">
                             <label class="form-label">House Name/Number</label>
                             <input type="text" class="form-control" name="houseName" required>
                           </div>
                           <div class="mb-3">
                             <label class="form-label">Street</label>
                             <input type="text" class="form-control" name="street" required>
                           </div>
                           <div class="mb-3">
                             <label class="form-label">City</label>
                             <input type="text" class="form-control" name="city" required>
                           </div>
                           <div class="mb-3">
                             <label class="form-label">State</label>
                             <input type="text" class="form-control" name="state" required>
                           </div>
                           <div class="mb-3">
                             <label class="form-label">PIN Code</label>
                             <input type="text" class="form-control" name="pincode" required pattern="[0-9]{6}">
                           </div>
   z                        <div class="mb-3">
                             <label class="form-label">Phone Number</label>
                             <input type="tel" class="form-control" name="phone" required pattern="[0-9]{10}">
                           </div>
                           <button type="submit" class="btn btn-dark w-100">Save Address</button>
                         </form>
                       </div>
                     </div>
                   </div>
                 </div>

                 <!-- Edit Address Form Modal -->
                 <div class="modal fade" id="editAddressModal" tabindex="-1">
                   <div class="modal-dialog">
                     <div class="modal-content">
                       <div class="modal-header">
                         <h5 class="modal-title">Edit Address</h5>
                         <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                       </div>
                       <div class="modal-body">
                         <form id="editAddressForm">
                           <input type="hidden" name="addressIndex" id="editAddressIndex">
                           <div class="mb-3">
                             <label class="form-label">Full Name</label>
                             <input type="text" class="form-control" name="name" id="editName" required>
                           </div>
                           <div class="mb-3">
                             <label class="form-label">House Name/Number</label>
                             <input type="text" class="form-control" name="houseName" id="editHouseName" required>
                           </div>
                           <div class="mb-3">
                             <label class="form-label">Street</label>
                             <input type="text" class="form-control" name="street" id="editStreet" required>
                           </div>
                           <div class="mb-3">
                             <label class="form-label">City</label>
                             <input type="text" class="form-control" name="city" id="editCity" required>
                           </div>
                           <div class="mb-3">
                             <label class="form-label">State</label>
                             <input type="text" class="form-control" name="state" id="editState" required>
                           </div>
                           <div class="mb-3">
                             <label class="form-label">PIN Code</label>
                             <input type="text" class="form-control" name="pincode" id="editPincode" required pattern="[0-9]{6}">
                           </div>
                           <div class="mb-3">
                             <label class="form-label">Phone Number</label>
                             <input type="tel" class="form-control" name="phone" id="editPhone" required pattern="[0-9]{10}">
                           </div>
                           <button type="submit" class="btn btn-dark w-100">Update Address</button>
                         </form>
                       </div>
                     </div>
                   </div>
                 </div>
               </div>


               <div class="tab-pane fade" id="orders" role="tabpanel" aria-labelledby="orders-tab">
                 <div class="orders-section">
                   <% if (orders && orders.length > 0) { %>
                     <% orders.forEach(order => { %>
                       <div class="order-card">
                         <div class="order-header">
                           <div class="order-header-grid">
                             <div class="order-info-item">
                               <span class="order-info-label">Order ID</span>
                               <span class="order-info-value">#<%= order._id.toString().slice(-8).toUpperCase() %></span>
                             </div>
                             <div class="order-info-item">
                               <span class="order-info-label">Order Date</span>
                               <span class="order-info-value">
                                 <%= new Date(order.orderDate).toLocaleDateString('en-IN', { 
                                   year: 'numeric', 
                                   month: 'long', 
                                   day: 'numeric' 
                                 }) %>
                               </span>
                             </div>
                             <div class="order-info-item">
                               <span class="order-info-label">Status</span>
                               <span class="status-badge status-<%= order.status.toLowerCase() %>">
                                 <%= order.status %>
                               </span>
                             </div>
                           </div>
                         </div>

                         <div class="order-body">
                           <div class="order-products-grid">
                             <% order.items.forEach(item => { %>
                               <div class="product-card">
                                 <img src="/uploads/product-images/<%= item.product.productImage[0] %>" 
                                      alt="<%= item.product.productName %>"
                                      class="product-image">
                                 <div class="product-details">
                                   <h4 class="product-name"><%= item.product.productName %></h4>
                                   <div class="product-meta">
                                     <p>Quantity: <%= item.quantity %></p>
                                     <p>₹<%= (item.product.price || 0).toLocaleString('en-IN') %></p>
                                   </div>
                                 </div>
                               </div>
                             <% }) %>
                           </div>
                         </div>

                         <div class="order-footer">
                           <div class="order-total">
                             Total: ₹<%= order.totalAmount.toLocaleString('en-IN') %>
                           </div>
                           <div class="order-actions">
                             <% if (order.status !== 'Delivered' && order.status !== 'Cancelled') { %>
                               <button onclick="cancelOrder('<%= order._id %>')" class="btn-order btn-cancel">
                                 Cancel Order
                               </button>
                             <% } %>
                             <button onclick="window.location.href='/order-details/<%= order._id %>'" class="btn-order btn-view">
                               View Details
                             </button>
                           </div>
                         </div>
                       </div>
                     <% }) %>
                   <% } else { %>
                     <div class="empty-orders text-center">
                       <h3>No Orders Yet</h3>
                       <p>Looks like you haven't made any orders yet.</p>
                       <a href="/shop" class="btn btn-dark">Start Shopping</a>
                     </div>
                   <% } %>
                 </div>
               </div>


               <div class="tab-pane fade" id="track-orders" role="tabpanel" aria-labelledby="track-orders-tab">
                 <div class="card">
                   <div class="card-header">
                     <h5 class="mb-0">Wallet</h5>
                   </div>
                   <div class="card-body contact-from-area">
                     <div class="row">
                       <div class="col-lg-8 mx-auto text-center mt-90">
                         <form>
                           <div class="form-group">
                             <label for="walletAmount" class="h4">Amount</label>
                             <div class="h3"></div>
                           </div>
                           <button type="button" class="btn btn-success" onclick="">Add Money</button>
                         </form>
                       </div>
                     </div>
                   </div>
                 </div>
               </div>


               <div class="tab-pane fade" id="wallet-history" role="tabpanel" aria-labelledby="orders-tab">
                 <div class="card">
                   <div class="card-header">
                     <h5 class="mb-0">Wallet History</h5>
                   </div>
                   <div class="card-body">
                     <div class="table-responsive">
                       <table class="table">
                         <thead>
                           <tr>
                             <th>Date</th>
                             <th>Status</th>
                             <th>Amount</th>
                           </tr>
                         </thead>
                         <tbody>
                           <tr>
                             <td></td>
                             <td></td>
                             <td></td>
                           </tr>
                         </tbody>
                       </table>
                     </div>
                   </div>
                 </div>
               </div>


               <div class="tab-pane fade" id="referal" role="tabpanel" aria-labelledby="track-orders-tab">
                 <div class="card">
                   <div class="card-header">
                     <h5 class="mb-0">Referal</h5>
                   </div>
                   <div class="card-body">
                     <h6 class="mb-3">Refer your friends and earn money!</h6>
                     <p>Share this link: <strong>></strong></p>
                     <p>Earned: ₹</p>
                   </div>
                 </div>
       </div>
     </div>
   </div>
 </section>
</main>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Function to update breadcrumb
    function updateBreadcrumb(tabName) {
        const currentPage = document.getElementById('current-page');
        currentPage.textContent = tabName;
    }

    // Add click event listeners to all nav links
    document.querySelectorAll('.dashboard-menu .nav-link').forEach(link => {
        link.addEventListener('click', function(e) {
            // Get the text content of the clicked link
            const tabName = this.textContent.trim();
            updateBreadcrumb(tabName);
        });
    });

    // Update breadcrumb on page load based on active tab
    const activeTab = document.querySelector('.dashboard-menu .nav-link.active');
    if (activeTab) {
        updateBreadcrumb(activeTab.textContent.trim());
    }

    // Check if there's a hash in the URL
    if (window.location.hash === '#orders') {
        // Find the orders tab and click it
        document.querySelector('#orders-tab').click();
    }

    const updateProfileForm = document.getElementById('updateProfileForm');
    
    updateProfileForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = {
            name: document.getElementById('name').value,
            phone: document.getElementById('phone').value
        };
        
        try {
            const response = await fetch('/update-profile', {  
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });
            
            const data = await response.json();
            
            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'Profile updated successfully!',
                    showConfirmButton: false,
                    timer: 1500
                }).then(() => {
                    window.location.reload();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: data.message || 'Failed to update profile'
                });
            }
        } catch (error) {
            console.error('Error updating profile:', error);
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Something went wrong while updating your profile'
            });
        }
    });
    
    // Profile image upload handler
    const profileImageInput = document.getElementById('profileImage');
    if (profileImageInput) {
        profileImageInput.addEventListener('change', async function() {
            const formData = new FormData();
            formData.append('profileImage', this.files[0]);
            
            try {
                const response = await fetch('/upload-profile-image', {
                    method: 'POST',
                    body: formData
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Profile image updated successfully!',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: data.message || 'Failed to update profile image'
                    });
                }
            } catch (error) {
                console.error('Error uploading profile image:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Something went wrong while uploading your profile image'
                });
            }
        });
    }
});

// Address Management Functions
function showAddAddressForm() {
    const modal = new bootstrap.Modal(document.getElementById('addAddressModal'));
    modal.show();
}

function editAddress(index) {
    const addresses = <%= JSON.stringify(user.addresses || []) %>;
    const address = addresses[index];
    
    document.getElementById('editAddressIndex').value = index;
    document.getElementById('editName').value = address.name;
    document.getElementById('editHouseName').value = address.houseName;
    document.getElementById('editStreet').value = address.street;
    document.getElementById('editCity').value = address.city;
    document.getElementById('editState').value = address.state;
    document.getElementById('editPincode').value = address.pincode;
    document.getElementById('editPhone').value = address.phone;
    
    const modal = new bootstrap.Modal(document.getElementById('editAddressModal'));
    modal.show();
}

function deleteAddress(index) {
    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#000',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch('/delete-address', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ addressIndex: index })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire(
                        'Deleted!',
                        'Your address has been deleted.',
                        'success'
                    ).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire(
                        'Error!',
                        data.message || 'Failed to delete address'
                    );
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire(
                    'Error!',
                    'Something went wrong'
                );
            });
        }
    });
}

document.getElementById('addAddressForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const addressData = Object.fromEntries(formData.entries());
    
    try {
        const response = await fetch('/add-address', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(addressData)
        });
        
        const data = await response.json();
        
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Address added successfully!',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                window.location.reload();
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: data.message || 'Failed to add address'
            });
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Something went wrong'
        });
    }
});

document.getElementById('editAddressForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const addressData = Object.fromEntries(formData.entries());
    
    try {
        const response = await fetch('/update-address', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(addressData)
        });
        
        const data = await response.json();
        
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Address updated successfully!',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                window.location.reload();
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: data.message || 'Failed to update address'
            });
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Something went wrong'
        });
    }
});

// Orders Management Functions
async function cancelOrder(orderId) {
    try {
        const result = await Swal.fire({
            title: 'Cancel Order',
            text: 'Are you sure you want to cancel this order?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, cancel it!',
            cancelButtonText: 'No, keep it'
        });

        if (result.isConfirmed) {
            const response = await fetch(`/orders/${orderId}/cancel`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'same-origin' // This is important for session cookies
            });

            const data = await response.json();

            if (response.ok) {
                await Swal.fire({
                    title: 'Success!',
                    text: data.message,
                    icon: 'success',
                    timer: 2000,
                    showConfirmButton: false
                });
                window.location.reload();
            } else {
                throw new Error(data.message);
            }
        }
    } catch (error) {
        console.error('Error cancelling order:', error);
        Swal.fire({
            title: 'Error!',
            text: error.message || 'Failed to cancel order. Please try again later.',
            icon: 'error'
        });
    }
}

document.addEventListener('DOMContentLoaded', function() {
    // Check if there's a stored active tab
    const activeTab = localStorage.getItem('activeTab');
    if (activeTab) {
        // Show the stored active tab
        const tabEl = document.querySelector(`#${activeTab}-tab`);
        if (tabEl) {
            const tab = new bootstrap.Tab(tabEl);
            tab.show();
        }
        // Clear the stored tab
        localStorage.removeItem('activeTab');
    } else if (window.location.hash) {
        // If there's a hash in the URL, show that tab
        const hash = window.location.hash.substring(1);
        const tabEl = document.querySelector(`#${hash}-tab`);
        if (tabEl) {
            const tab = new bootstrap.Tab(tabEl);
            tab.show();
        }
    }
});
</script>
<%- include("../../views/partials/user/footer") %>
