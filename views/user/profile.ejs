<%- include("../partials/user/header") %>

<style>
     .profile-section {
            padding: 20px;
            background: #f8f9fa;
            border-radius: 15px;
        }

        .profile-card {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.05);
            transition: transform 0.3s ease;
        }

        .profile-card:hover {
            transform: translateY(-5px);
        }

        .profile-image-wrapper {
            position: relative;
            width: 180px;
            height: 180px;
            margin: 0 auto 20px;
        }

        .profile-image-container {
        position: relative;
        width: 150px;
        height: 150px;
        margin: 0 auto;
        border-radius: 50%;
        overflow: hidden;
    }

    .profile-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .image-overlay {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        background: rgba(0, 0, 0, 0.5);
        padding: 10px;
        transition: all 0.3s ease;
    }

    .upload-btn {
        cursor: pointer;
        color: white;
        display: inline-block;
        padding: 5px 10px;
    }

    .hidden-input {
        display: none;
    }

    #uploadSpinner {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    @keyframes slideOut {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }

        .upload-btn {
            color: white;
            cursor: pointer;
            padding: 8px 15px;
            border-radius: 20px;
            background: rgba(255,255,255,0.2);
            transition: background 0.3s ease;
        }

        .upload-btn:hover {
            background: rgba(255,255,255,0.3);
        }

        .profile-info {
            text-align: center;
            margin-top: 15px;
        }

        .user-name {
            font-size: 1.2rem;
            font-weight: 600;
            margin: 0;
            color: #333;
        }

        .user-email {
            font-size: 0.9rem;
            color: #666;
            margin: 5px 0 0;
        }
/* Main Container Alignment */
.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

/* Profile Stats */
.profile-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.stat-item {
    background: #fff;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    display: flex;
    align-items: center;
}

.stat-item i {
    font-size: 2em;
    color: #1e918b;
    margin-right: 15px;
}

.stat-details {
    display: flex;
    flex-direction: column;
}

.stat-value {
    font-size: 1.2em;
    font-weight: bold;
    color: #333;
}

.stat-label {
    font-size: 0.9em;
    color: #666;
}

/* Orders List */
.orders-list {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.order-card {
    background: #fff;
    border-radius: 10px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    overflow: hidden;
}

.order-header {
    padding: 15px;
    background: #f8f9fa;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.order-status {
    padding: 5px 10px;
    border-radius: 15px;
    font-size: 0.9em;
    font-weight: 500;
}

.order-status.pending { background: #fff3cd; color: #856404; }
.order-status.processing { background: #cce5ff; color: #004085; }
.order-status.shipped { background: #d4edda; color: #155724; }
.order-status.delivered { background: #d1e7dd; color: #0f5132; }
.order-status.cancelled { background: #f8d7da; color: #721c24; }

.order-items {
    padding: 15px;
    border-bottom: 1px solid #eee;
}

.order-item {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-bottom: 10px;
}

.order-item img {
    width: 60px;
    height: 60px;
    object-fit: cover;
    border-radius: 5px;
}

.order-total {
    padding: 15px;
    font-weight: bold;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.savings-text {
    color: #2e7d32;
    font-size: 0.9em;
}

.order-actions {
    padding: 15px;
    display: flex;
    gap: 10px;
    justify-content: flex-end;
}

.btn-order {
    padding: 8px 15px;
    border-radius: 5px;
    border: none;
    cursor: pointer;
    font-size: 0.9em;
    text-decoration: none;
}

.btn-cancel {
    background: #dc3545;
    color: white;
}

.btn-details {
    background: #1e918b;
    color: white;
}

/* Responsive Design */
@media (max-width: 768px) {
    .profile-stats {
        grid-template-columns: repeat(2, 1fr);
    }

    .order-header {
        flex-direction: column;
        gap: 10px;
        text-align: center;
    }

    .order-item {
        flex-direction: column;
        text-align: center;
    }

    .order-actions {
        flex-direction: column;
    }
}
</style>

<main class="main">
   
<section class="pt-10 pb-10">
    <!-- Breadcrumb Section -->
    <div class="breadcrumb-wrapper">
        <div class="container">
            <ul class="breadcrumb">
                <li class="breadcrumb-item">
                    <a href="/">
                        <i class="fi-rs-home breadcrumb-icon"></i>
                        Home
                    </a>
                </li>
                <!-- <li class="breadcrumb-item">
                    <a href="/user">Account</a>
                </li> -->
                <li class="breadcrumb-item active" id="current-page">Dashboard</li>
            </ul>
        </div>
    </div>

    <div class="container">
     <div class="row">
       <div class="col-lg-10 m-auto">
         <div class="row">
           <div class="col-md-4">
             <div class="dashboard-menu">
               <ul class="nav flex-column" role="tablist">
                 <li class="nav-item">
                   <a class="nav-link active" id="dashboard-tab" data-bs-toggle="tab" href="#dashboard" role="tab" aria-controls="dashboard" aria-selected="false">
                     <i class="fi-rs-settings-sliders mr-10"></i>Dashboard
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="address-tab" data-bs-toggle="tab" href="#address" role="tab" aria-controls="address" aria-selected="true">
                     <i class="fi-rs-marker mr-10"></i>My Address
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="orders-tab" data-bs-toggle="tab" href="#orders" role="tab" aria-controls="orders" aria-selected="false">
                     <i class="fi-rs-shopping-bag mr-10"></i>Orders
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="wallet-status-tab" data-bs-toggle="tab" href="#wallet-status" role="tab" aria-controls="wallet-status" aria-selected="false">
                     <i class="fi-rs-wallet mr-10"></i>Wallet Status
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="wallet-history-tab" data-bs-toggle="tab" href="#wallet-history" role="tab" aria-controls="wallet-history" aria-selected="false">
                     <i class="fi-rs-time-past mr-10"></i>Wallet History
                   </a>
                 </li>
                 <!-- <li class="nav-item">
                   <a class="nav-link" id="track-orders-tab" data-bs-toggle="tab" href="#referal" role="tab" aria-controls="track-orders" aria-selected="false">
                     <i class="fi-rs-shopping-cart-check mr-10"></i>Referals
                   </a>
                 </li> -->
                 <li class="nav-item">
                   <a class="nav-link" href="/logout">
                     <i class="fi-rs-sign-out mr-10"></i>Logout
                   </a>
                 </li>
               </ul>
             </div>
           </div>
           <div class="col-md-8">
             <div class="tab-content dashboard-content">


               <div class="tab-pane fade show active" id="dashboard" role="tabpanel" aria-labelledby="dashboard-tab">
                 <div class="card card-green" style="max-width: 800px; margin: auto;">
                    <div class="card-header" style="background: #f8f9fa; border-bottom: 1px solid #eee;">
                        <h5 class="mb-0 text-center" style="font-size: 1.1rem;">User Profile</h5>
                    </div>
                    <div class="card-body" style="padding: 1.5rem;">
                        <div class="row g-0">
                            <!-- Left side - Profile Image -->
                            <div class="col-md-4 text-center profile-section">
                                <div class="profile-card">
                                    <div class="profile-image-wrapper">
                                        <div class="profile-image-container">
                                            <% if (user.image) { %>
                                                <img src="/uploads/userimages/<%= user.image %>" alt="User Profile" class="profile-image" id="profilePreview">
                                            <% } else { %>
                                                <img src="images/dp1.jpg" alt="Default Profile" class="profile-image" id="profilePreview">
                                            <% } %>
                                            <div class="image-overlay">
                                                <form id="profileImageForm" action="/upload-profile-image" method="POST" enctype="multipart/form-data">
                                                    <input type="file" 
                                                           name="profileImage" 
                                                           id="profileImage" 
                                                           accept="image/jpeg,image/png,image/jpg" 
                                                           class="hidden-input" 
                                                           onchange="handleImageUpload(event)">
                                                    <label for="profileImage" class="upload-btn">
                                                        <i class="fi-rs-camera"></i>
                                                    </label>
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="profile-info">
                                        <h4 class="user-name"><%= user.name %></h4>
                                    </div>
                                    <!-- Add loading spinner -->
                                    <div id="uploadSpinner" class="spinner-border text-primary" style="display: none;" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Right side - Form -->
                            <div class="col-md-8">
                                <form id="updateProfileForm" style="padding-left: 1.5rem;">
                                    <div style="margin-bottom: 0.8rem;">
                                        <label class="form-label" style="font-size: 0.8rem; color: #666;">Name</label>
                                        <input type="text" id="name" name="name" class="form-control form-control-sm" value="<%= user.name %>" style="height: 32px; font-size: 0.9rem;">
                                    </div>

                                    <div style="margin-bottom: 0.8rem;">
                                        <label class="form-label" style="font-size: 0.8rem; color: #666;">Phone</label>
                                        <input type="text" id="phone" name="phone" class="form-control form-control-sm" value="<%= user.phone %>" style="height: 32px; font-size: 0.9rem;">
                                    </div>

                                    <div style="margin-bottom: 1rem;">
                                        <label class="form-label" style="font-size: 0.8rem; color: #666;">Email</label>
                                        <input type="email" id="email" name="email" class="form-control form-control-sm" value="<%= user.email %>" readonly style="height: 32px; font-size: 0.9rem; background: #f8f9fa;">
                                    </div>

                                    <div style="display: flex; gap: 0.5rem;">
                                        <button type="submit" class="btn btn-sm" style="background: #000; color: white; font-size: 0.8rem; padding: 0.3rem 0.8rem;">Save</button>
                                        <a href="/pass-reset" class="btn btn-sm" style="background: #000; color: white; font-size: 0.8rem; padding: 0.3rem 0.8rem; text-decoration: none;">Reset Password</a>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
               </div>


               <div class="tab-pane fade" id="address" role="tabpanel" aria-labelledby="address-tab">
                 <div class="row">
                   <div class="col-12 mb-4">
                     <button type="button" class="btn btn-dark" data-bs-toggle="modal" data-bs-target="#addAddressModal">
                       <i class="fas fa-plus"></i> Add New Address
                     </button>
                   </div>
                   <% if (user.addresses && user.addresses.length > 0) { %>
                     <% user.addresses.forEach((address, index) => { %>
                       <div class="col-md-6 mb-4" data-address-index="<%= index %>">
                         <div class="card">
                           <div class="card-body">
                             <h5 class="card-title" data-name><%= address.name %></h5>
                             <p class="card-text">
                               <span data-house><%= address.houseName %></span><br>
                               <span data-street><%= address.street %></span><br>
                               <span data-city><%= address.city %></span><br>
                               <span data-state><%= address.state %></span><br>
                               <span data-pincode><%= address.pincode %></span><br>
                               <span data-phone><%= address.phone %></span>
                             </p>
                             <div class="btn-group">
                               <button class="btn btn-sm btn-dark" onclick="editAddress('<%= index %>')">Edit</button>
                               <button class="btn btn-sm btn-danger" onclick="deleteAddress('<%= index %>')">Delete</button>
                             </div>
                           </div>
                         </div>
                       </div>
                     <% }); %>
                   <% } else { %>
                     <div class="col-12">
                       <p class="text-center">No addresses found. Add a new address to get started.</p>
                     </div>
                   <% } %>
                 </div>
               </div>


               <div class="tab-pane fade" id="orders" role="tabpanel" aria-labelledby="orders-tab">
                 <div class="orders-section">
                   <% if (orders && orders.length > 0) { %>
                     <% orders.forEach(order => { %>
                       <div class="order-card">
                         <div class="order-header">
                           <div class="order-header-grid">
                             <div class="order-info-item">
                               <span class="order-info-label">Order ID</span>
                               <span class="order-info-value">#<%= order._id.toString().slice(-8).toUpperCase() %></span>
                             </div>
                             <div class="order-info-item">
                               <span class="order-info-label">Order Date</span>
                               <span class="order-info-value">
                                 <%= new Date(order.orderDate).toLocaleDateString('en-IN', { 
                                   year: 'numeric', 
                                   month: 'long', 
                                   day: 'numeric' 
                                 }) %>
                               </span>
                             </div>
                             <div class="order-info-item">
                               <span class="order-info-label">Status</span>
                               <span class="status-badge status-<%= order.status.toLowerCase() %>">
                                 <%= order.status %>
                               </span>
                             </div>
                           </div>
                         </div>

                         <div class="order-body">
                            <div class="order-products-grid">
                              <% order.items.forEach(item => { %>
                                <% if (item.product) { %>
                                  <div class="product-card">
                                    <img src="/uploads/product-images/<%= item.product.productImage?.[0] || 'default-image.jpg' %>" 
                                         alt="<%= item.product.productName || 'Product Name Unavailable' %>"
                                         class="product-image">
                                    <div class="product-details">
                                      <h4 class="product-name"><%= item.product.productName || 'Product Name Unavailable' %></h4>
                                      <div class="product-meta">
                                        <p>Quantity: <%= item.quantity || 0 %></p>
                                        <!-- <p>₹<%= (item.product.price || 0).toLocaleString('en-IN') %></p> -->
                                      </div>
                                    </div>
                                  </div>
                                <% } else { %>
                                  <div class="product-card">
                                    <p>Product details are unavailable.</p>
                                  </div>
                                <% } %>
                              <% }) %>
                            </div>
                          </div>
                          

                         <div class="order-footer">
                           <div class="order-total">
                             Total: ₹<%= (order.totalAmount || 0).toLocaleString('en-IN') %>
                           </div>
                           <div class="order-actions">
                             <% if (order.status !== 'Delivered' && order.status !== 'Cancelled' &&order.status !== 'Returned') { %>
                               <!-- <button onclick="cancelOrder('<%= order._id.toString() %>')" class="btn-order btn-cancel">
                                 Cancel Order
                               </button> -->
                             <% } %>
                             <button onclick="window.location.href='/order-details/<%= order._id %>'" class="btn-order btn-view">
                               View Details
                             </button>
                           </div>
                         </div>
                       </div>
                     <% }) %>
                   <% } else { %>
                     <div class="empty-orders text-center">
                       <h3>No Orders Yet</h3>
                       <p>Looks like you haven't made any orders yet.</p>
                       <a href="/shop" class="btn btn-dark">Start Shopping</a>
                     </div>
                   <% } %>
                 </div>
               </div>

               <div class="tab-pane fade" id="wallet-status" role="tabpanel" aria-labelledby="wallet-status-tab">
                 <div class="card">
                   <div class="card-header">
                     <h3 class="mb-0">Wallet Status</h3>
                   </div>
                   <div class="card-body">
                     <div class="wallet-balance">
                       <h4>Current Balance</h4>
                       <h2 class="text-success">₹<%= wallet ? wallet.balance.toLocaleString('en-IN') : '0' %></h2>
                     </div>
                     <div class="wallet-info mt-4">
                       <p><strong>Last Transaction:</strong> 
                         <% if (wallet && wallet.transactions && wallet.transactions.length > 0) { %>
                           <%= wallet.transactions[0].type === 'credit' ? '+' : '-' %>₹<%= wallet.transactions[0].amount.toLocaleString('en-IN') %>
                           (<%= wallet.transactions[0].description %>)
                         <% } else { %>
                           No transactions yet
                         <% } %>
                       </p>
                     </div>
                   </div>
                 </div>
               </div>

               <div class="tab-pane fade" id="wallet-history" role="tabpanel" aria-labelledby="wallet-history-tab">
                 <div class="card">
                   <div class="card-header">
                     <h3 class="mb-0">Transaction History</h3>
                   </div>
                   <div class="card-body p-3">
                     <% if (wallet && wallet.transactions && wallet.transactions.length > 0) { %>
                       <div class="table-responsive">
                         <table class="table table-sm table-hover align-middle">
                           <thead class="table-light">
                             <tr class="text-muted small">
                               <th class="py-2">Date</th>
                               <th class="py-2">Details</th>
                               <th class="py-2 text-end">Amount</th>
                             </tr>
                           </thead>
                           <tbody>
                             <% wallet.transactions.forEach(transaction => { %>
                               <tr>
                                 <td class="py-2 small text-muted">
                                   <%= new Date(transaction.date).toLocaleDateString('en-IN', { 
                                     day: 'numeric',
                                     month: 'short',
                                     year: 'numeric'
                                   }) %>
                                   <div class="small text-muted" style="font-size: 0.75rem;">
                                     <%= new Date(transaction.date).toLocaleTimeString('en-IN', {
                                       hour: '2-digit',
                                       minute: '2-digit',
                                       hour12: true
                                     }) %>
                                   </div>
                                 </td>
                                 <td class="py-2">
                                   <div class="d-flex flex-column">
                                     <span class="mb-1"><%= transaction.description %></span>
                                     <% if (transaction.orderId) { %>
                                       <a href="/orders/<%= transaction.orderId %>" class="text-primary small">
                                         <!-- <i class="fi-rs-shopping-cart me-1"></i>View Order -->
                                       </a>
                                     <% } %>
                                   </div>
                                 </td>
                                 <td class="py-2 text-end">
                                   <div class="d-flex flex-column align-items-end">
                                     <span class="<%= transaction.type === 'credit' ? 'text-success' : 'text-danger' %> fw-medium">
                                       <%= transaction.type === 'credit' ? '+' : '-' %>₹<%= transaction.amount.toLocaleString('en-IN') %>
                                     </span>
                                     <span class="badge <%= transaction.type === 'credit' ? 'bg-success-subtle text-success' : 'bg-danger-subtle text-danger' %> small">
                                       <%= transaction.type.toUpperCase() %>
                                     </span>
                                   </div>
                                 </td>
                               </tr>
                             <% }); %>
                           </tbody>
                         </table>
                       </div>
                     <% } else { %>
                       <div class="text-center py-4">
                         <i class="fi-rs-time-past text-muted mb-2" style="font-size: 2rem;"></i>
                         <p class="text-muted mb-0">No transactions found in your wallet history.</p>
                       </div>
                     <% } %>
                   </div>
                 </div>
               </div>

               <div class="tab-pane fade" id="referal" role="tabpanel" aria-labelledby="track-orders-tab">
                 <div class="card">
                   <div class="card-header">
                     <h5 class="mb-0">Referal</h5>
                   </div>
                   <div class="card-body">
                     <h6 class="mb-3">Refer your friends and earn money!</h6>
                     <p>Share this link: <strong>></strong></p>
                     <p>Earned: ₹</p>
                   </div>
                 </div>
       </div>
     </div>
   </div>
 </section>
</main>

<!-- Add Address Modal -->
<div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="addAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addAddressModalLabel">Add New Address</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addAddressForm" novalidate>
                    <div class="mb-3">
                        <label for="address_name" class="form-label">Full Name</label>
                        <input type="text" class="form-control" id="address_name" name="name" required>
                        <div class="invalid-feedback">Please enter a valid name</div>
                    </div>
                    <div class="mb-3">
                        <label for="address_houseName" class="form-label">House Name/Number</label>
                        <input type="text" class="form-control" id="address_houseName" name="houseName" required>
                        <div class="invalid-feedback">Please enter house name/number</div>
                    </div>
                    <div class="mb-3">
                        <label for="address_street" class="form-label">Street</label>
                        <input type="text" class="form-control" id="address_street" name="street" required>
                        <div class="invalid-feedback">Please enter street name</div>
                    </div>
                    <div class="mb-3">
                        <label for="address_city" class="form-label">City</label>
                        <input type="text" class="form-control" id="address_city" name="city" required>
                        <div class="invalid-feedback">Please enter city name</div>
                    </div>
                    <div class="mb-3">
                        <label for="address_state" class="form-label">State</label>
                        <select class="form-control" id="address_state" name="state" required>
                            <option value="">Select State</option>
                            <option value="Andhra Pradesh">Andhra Pradesh</option>
                            <option value="Arunachal Pradesh">Arunachal Pradesh</option>
                            <option value="Assam">Assam</option>
                            <option value="Bihar">Bihar</option>
                            <option value="Chhattisgarh">Chhattisgarh</option>
                            <option value="Goa">Goa</option>
                            <option value="Gujarat">Gujarat</option>
                            <option value="Haryana">Haryana</option>
                            <option value="Himachal Pradesh">Himachal Pradesh</option>
                            <option value="Jharkhand">Jharkhand</option>
                            <option value="Karnataka">Karnataka</option>
                            <option value="Kerala">Kerala</option>
                            <option value="Madhya Pradesh">Madhya Pradesh</option>
                            <option value="Maharashtra">Maharashtra</option>
                            <option value="Manipur">Manipur</option>
                            <option value="Meghalaya">Meghalaya</option>
                            <option value="Mizoram">Mizoram</option>
                            <option value="Nagaland">Nagaland</option>
                            <option value="Odisha">Odisha</option>
                            <option value="Punjab">Punjab</option>
                            <option value="Rajasthan">Rajasthan</option>
                            <option value="Sikkim">Sikkim</option>
                            <option value="Tamil Nadu">Tamil Nadu</option>
                            <option value="Telangana">Telangana</option>
                            <option value="Tripura">Tripura</option>
                            <option value="Uttar Pradesh">Uttar Pradesh</option>
                            <option value="Uttarakhand">Uttarakhand</option>
                            <option value="West Bengal">West Bengal</option>
                        </select>
                        <div class="invalid-feedback">Please select a state</div>
                    </div>
                    <div class="mb-3">
                        <label for="address_pincode" class="form-label">PIN Code</label>
                        <input type="text" class="form-control" id="address_pincode" name="pincode" 
                            pattern="^[1-9][0-9]{5}$"
                            maxlength="6"
                            required>
                        <div class="invalid-feedback">Please enter a valid 6-digit PIN code</div>
                    </div>
                    <div class="mb-3">
                        <label for="address_phone" class="form-label">Phone Number</label>
                        <div class="input-group">
                            <span class="input-group-text">+91</span>
                            <input type="tel" class="form-control" id="address_phone" name="phone" 
                                pattern="^[6-9][0-9]{9}$"
                                maxlength="10"
                                required>
                            <div class="invalid-feedback">Please enter a valid 10-digit mobile number</div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-dark" onclick="submitAddressForm()">Add Address</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="editAddressModal" tabindex="-1" aria-labelledby="editAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editAddressForm" novalidate>
                    <input type="hidden" id="edit_address_index">
                    <div class="mb-3">
                        <label for="edit_address_name" class="form-label">Full Name</label>
                        <input type="text" class="form-control" id="edit_address_name" name="name" >
                        <div class="invalid-feedback">Please enter a valid name</div>
                    </div>
                    <div class="mb-3">
                        <label for="edit_address_houseName" class="form-label">House Name/Number</label>
                        <input type="text" class="form-control" id="edit_address_houseName" name="houseName" >
                        <div class="invalid-feedback">Please enter a valid house name/number</div>
                    </div>
                    <div class="mb-3">
                        <label for="edit_address_street" class="form-label">Street</label>
                        <input type="text" class="form-control" id="edit_address_street" name="street" >
                        <div class="invalid-feedback">Please enter a valid street name</div>
                    </div>
                    <div class="mb-3">
                        <label for="edit_address_city" class="form-label">City</label>
                        <input type="text" class="form-control" id="edit_address_city" name="city" >
                        <div class="invalid-feedback">Please enter a valid city name</div>
                    </div>
                    <div class="mb-3">
                        <label for="edit_address_state" class="form-label">State</label>
                        <input type="text" class="form-control" id="edit_address_state" name="state" >
                        <div class="invalid-feedback">Please enter a valid state name</div>
                    </div>
                    <div class="mb-3">
                        <label for="edit_address_pincode" class="form-label">Pincode</label>
                        <input type="text" class="form-control" id="edit_address_pincode" name="pincode" >
                        <div class="invalid-feedback">Please enter a valid 6-digit pincode</div>
                    </div>
                    <div class="mb-3">
                        <label for="edit_address_phone" class="form-label">Phone Number</label>
                        <div class="input-group">
                            <span class="input-group-text">+91</span>
                            <input type="tel" class="form-control" id="edit_address_phone" name="phone" required pattern="[0-9]{10}">
                            <div class="invalid-feedback">Please enter a valid 10-digit phone number</div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-dark" onclick="updateEditedAddress()">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<script>

// function handleImageUpload(event) {
//     const file = event.target.files[0];
//     if (!file) {
//         console.error('No file selected');
//         return;
//     }

//     console.log('File selected:', file);

//     // Validate file type
//     const validTypes = ['image/jpeg', 'image/png', 'image/jpg'];
//     if (!validTypes.includes(file.type)) {
//         console.error('Invalid file type:', file.type);
//         showNotification('Please upload only JPG, JPEG or PNG files', 'error');
//         return;
//     }

//     // Validate file size
//     const maxSize = 5 * 1024 * 1024; // 5MB in bytes
//     if (file.size > maxSize) {
//         console.error('File size too large:', file.size);
//         showNotification('File size should be less than 5MB', 'error');
//         return;
//     }

//     console.log('File validation passed');

//     // Show loading state
//     const spinner = document.getElementById('uploadSpinner');
//     const imageContainer = document.querySelector('.profile-image-container');
//     const uploadBtn = document.querySelector('.upload-btn');

//     spinner.style.display = 'block';
//     imageContainer.style.opacity = '0.7';
//     uploadBtn.style.display = 'none';

//     const formData = new FormData(document.getElementById('profileImageForm'));
//     console.log('FormData:', [...formData.entries()]);

//     // Show preview before upload
//     const reader = new FileReader();
//     reader.onload = function(e) {
//         console.log('FileReader loaded');
//         document.getElementById('profilePreview').src = e.target.result;
//     };
//     reader.readAsDataURL(file);

//     fetch('/upload-profile-image', {
//         method: 'POST',
//         body: formData,
//         headers: {
//             'Accept': 'application/json'
//         },
//         credentials: 'same-origin'
//     })
//     .then(async response => {
//         console.log('Response status:', response.status);
//         if (!response.ok) {
//             const errorData = await response.json().catch(() => null);
//             console.error('Error response:', errorData);
//             throw new Error(errorData?.message || 'Upload failed');
//         }
//         return response.json();
//     })
//     .then(data => {
//         console.log('Upload success:', data);
//         if (data.success) {
//             const profileImage = document.querySelector('.profile-image');
//             profileImage.src = `/uploads/userimages/${data.filename}?t=${new Date().getTime()}`;
//             showNotification('Profile picture updated successfully!', 'success');
//         } else {
//             throw new Error(data.message || 'Failed to update profile picture');
//         }
//     })
//     .catch(error => {
//         console.error('Upload error:', error);
//         showNotification(error.message || 'An error occurred while uploading', 'error');
//         const profileImage = document.querySelector('.profile-image');
//         profileImage.src = profileImage.getAttribute('data-original-src');
//     })
//     .finally(() => {
//         console.log('Upload process completed');
//         spinner.style.display = 'none';
//         imageContainer.style.opacity = '1';
//         uploadBtn.style.display = 'block';
//     });
// }

function showNotification(message, type) {
    // Create a better notification system
    const notificationDiv = document.createElement('div');
    notificationDiv.className = `alert alert-${type === 'success' ? 'success' : 'danger'} notification`;
    notificationDiv.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px;
        border-radius: 4px;
        z-index: 1000;
        animation: slideIn 0.5s ease-out;
    `;
    notificationDiv.textContent = message;

    document.body.appendChild(notificationDiv);

    // Remove notification after 3 seconds
    setTimeout(() => {
        notificationDiv.style.animation = 'slideOut 0.5s ease-in';
        setTimeout(() => {
            document.body.removeChild(notificationDiv);
        }, 500);
    }, 3000);
}

function submitAddressForm() {
    if (!validateAddressForm()) {
        return;
    }

    const formData = {
        name: document.getElementById('address_name').value.trim(),
        houseName: document.getElementById('address_houseName').value.trim(),
        street: document.getElementById('address_street').value.trim(),
        city: document.getElementById('address_city').value.trim(),
        state: document.getElementById('address_state').value,
        pincode: document.getElementById('address_pincode').value.trim(),
        phone: document.getElementById('address_phone').value.trim()
    };

     const submitButton = document.querySelector('#addAddressModal .btn-dark');
    const originalText = submitButton.textContent;
    submitButton.disabled = true;
    submitButton.textContent = 'Adding...';

    fetch('/add-address', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(data => {
                throw new Error(data.message || 'Failed to add address');
            });
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
             const modal = bootstrap.Modal.getInstance(document.getElementById('addAddressModal'));
            modal.hide();
            
             setTimeout(() => {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: data.message || 'Address added successfully',
                    showConfirmButton: false,
                    timer: 1500
                }).then(() => {
                    location.reload();
                });
            }, 300);  
        } else {
            throw new Error(data.message || 'Failed to add address');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to add address. Please try again.'
        });
    })
    .finally(() => {
         submitButton.disabled = false;
        submitButton.textContent = originalText;
    });
}

 document.getElementById('addAddressModal').addEventListener('show.bs.modal', function () {
    const form = document.getElementById('addAddressForm');
    form.reset();
    form.classList.remove('was-validated');
    
     document.getElementById('addAddressModalLabel').textContent = 'Add New Address';
    const submitButton = document.querySelector('#addAddressModal .btn-dark');
    submitButton.textContent = 'Add Address';
    submitButton.onclick = submitAddressForm;
});

 document.getElementById('addAddressModal').addEventListener('hidden.bs.modal', function () {
    const form = document.getElementById('addAddressForm');
    form.reset();
    form.classList.remove('was-validated');
});

 function editAddress(index) {
    fetch(`/get-address/${index}`)
        .then(response => response.json())
        .then(address => {
            document.getElementById('edit_address_index').value = index;
            document.getElementById('edit_address_name').value = address.name;
            document.getElementById('edit_address_houseName').value = address.houseName;
            document.getElementById('edit_address_street').value = address.street;
            document.getElementById('edit_address_city').value = address.city;
            document.getElementById('edit_address_state').value = address.state;
            document.getElementById('edit_address_pincode').value = address.pincode;
            document.getElementById('edit_address_phone').value = address.phone;
            
            new bootstrap.Modal(document.getElementById('editAddressModal')).show();
        })
        .catch(error => {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to load address details'
            });
        });
}

async function updateEditedAddress() {
    if (!validateEditAddressForm()) {
        return;
    }

    const index = document.getElementById('edit_address_index').value;
    const updatedAddress = {
        name: document.getElementById('edit_address_name').value.trim(),
        houseName: document.getElementById('edit_address_houseName').value.trim(),
        street: document.getElementById('edit_address_street').value.trim(),
        city: document.getElementById('edit_address_city').value.trim(),
        state: document.getElementById('edit_address_state').value.trim(),
        pincode: document.getElementById('edit_address_pincode').value.trim(),
        phone: document.getElementById('edit_address_phone').value.trim()
    };

    try {
        const response = await fetch('/update-address', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                index: index,
                address: updatedAddress
            })
        });

        if (response.ok) {
            bootstrap.Modal.getInstance(document.getElementById('editAddressModal')).hide();
            
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Address updated successfully',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                location.reload();
            });
        } else {
            throw new Error('Failed to update address');
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Failed to update address. Please try again.'
        });
    }
}

function validateEditAddressForm() {
    const form = document.getElementById('editAddressForm');
    if (!form.checkValidity()) {
        form.classList.add('was-validated');
        return false;
    }
    
    const pincode = document.getElementById('edit_address_pincode').value.trim();
    const phone = document.getElementById('edit_address_phone').value.trim();
    
    if (pincode.length !== 6 || isNaN(pincode)) {
    document.getElementById('edit_address_pincode').setCustomValidity('Please enter a valid 6-digit pincode');
    form.classList.add('was-validated');
    return false;
} else {
    document.getElementById('edit_address_pincode').setCustomValidity('');  
}

    
    if (!/^\d{10}$/.test(phone)) {
        document.getElementById('edit_address_phone').setCustomValidity('Please enter a valid 10-digit phone number');
        form.classList.add('was-validated');
        return false;
    }
    
    return true;
}
 function deleteAddress(index) {
    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/delete-address/${index}`, {
                method: 'DELETE'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire(
                        'Deleted!',
                        'Your address has been deleted.',
                        'success'
                    ).then(() => {
                        location.reload();
                    });
                } else {
                    throw new Error(data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to delete address'
                });
            });
        }
    });
}

 function validateForm() {
    const name = document.getElementById('name').value;
    const houseName = document.getElementById('houseName').value;
    const street = document.getElementById('street').value;
    const city = document.getElementById('city').value;
    const state = document.getElementById('state').value;
    const pincode = document.getElementById('pincode').value;
    const phone = document.getElementById('phone').value;

     if (!name || !houseName || !street || !city || !state || !pincode || !phone) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'All fields are required'
        });
        return false;
    }

     if (!/^\d{10}$/.test(phone)) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Phone number must be 10 digits'
        });
        return false;
    }

     if (!/^\d{6}$/.test(pincode)) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'PIN code must be 6 digits'
        });
        return false;
    }

    return true;
}

 function validateAddressForm() {
    const name = document.getElementById('address_name').value.trim();
    const houseName = document.getElementById('address_houseName').value.trim();
    const street = document.getElementById('address_street').value.trim();
    const city = document.getElementById('address_city').value.trim();
    const state = document.getElementById('address_state').value;
    const pincode = document.getElementById('address_pincode').value.trim();
    const phone = document.getElementById('address_phone').value.trim();

     if (!name || !houseName || !street || !city || !state || !pincode || !phone) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'All fields are required'
        });
        return false;
    }

     if (!/^[6-9]\d{9}$/.test(phone)) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Phone number must be 10 digits and start with 6-9'
        });
        return false;
    }

     if (!/^\d{6}$/.test(pincode)) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'PIN code must be 6 digits'
        });
        return false;
    }

    return true;
}

 document.querySelectorAll('#addAddressForm input, #addAddressForm select').forEach(input => {
    input.addEventListener('input', function() {
        this.classList.remove('is-invalid');
    });
});

 function validateProfileForm() {
    const name = document.getElementById('name').value.trim();
    const phone = document.getElementById('phone').value.trim();
    
     if (!name || !/^[a-zA-Z\s]{3,50}$/.test(name)) {
        Swal.fire({
            icon: 'error',
            title: 'Invalid Name',
            text: 'Name should be 3-50 characters long and contain only letters and spaces'
        });
        return false;
    }

     if (!phone || !/^[6-9]\d{9}$/.test(phone)) {
        Swal.fire({
            icon: 'error',
            title: 'Invalid Phone Number',
            text: 'Please enter a valid 10-digit mobile number starting with 6-9'
        });
        return false;
    }

    return true;
}

document.getElementById('updateProfileForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
     if (!validateProfileForm()) {
        return;
    }
    
    const formData = {
        name: document.getElementById('name').value.trim(),
        phone: document.getElementById('phone').value.trim()
    };

    fetch('/update-profile', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: data.message
            }).then(() => {
                location.reload();
            });
        } else {
            throw new Error(data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to update profile'
        });
    });
});

 document.getElementById('name').addEventListener('input', function(e) {
    const input = e.target;
    const namePattern = /^[a-zA-Z\s]{0,50}$/;
    
     input.value = input.value.replace(/[^a-zA-Z\s]/g, '');
    
     if (input.value.length > 50) {
        input.value = input.value.substring(0, 50);
    }
});

document.getElementById('phone').addEventListener('input', function(e) {
    const input = e.target;
    
     input.value = input.value.replace(/\D/g, '');
    
     if (input.value.length > 10) {
        input.value = input.value.substring(0, 10);
    }
    
    
     if (input.value.length === 1 && !/^[6-9]$/.test(input.value)) {
        input.value = '';
    }
});

async function cancelOrder(orderId) {
    try {
        const result = await Swal.fire({
            title: 'Cancel Order',
            text: 'Are you sure you want to cancel this order?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, Cancel Order',
            cancelButtonText: 'No, Keep Order',
            reverseButtons: true
        });

        if (result.isConfirmed) {
             Swal.fire({
                title: 'Cancelling Order...',
                text: 'Please wait',
                allowOutsideClick: false,
                allowEscapeKey: false,
                showConfirmButton: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            const response = await fetch(`/order/${orderId}/cancel`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include'
            });

            const data = await response.json();

            if (response.ok && data.success) {
                await Swal.fire({
                    title: 'Order Cancelled',
                    text: 'Your order has been cancelled successfully',
                    icon: 'success',
                    timer: 2000,
                    showConfirmButton: false
                });
                window.location.reload();
            } else {
                throw new Error(data.message || 'Failed to cancel order');
            }
        }
    } catch (error) {
        console.error('Error cancelling order:', error);
        await Swal.fire({
            title: 'Error',
            text: error.message || 'Something went wrong while cancelling the order'
        });
    }
}

async function returnOrder(orderId) {
    try {
        const result = await Swal.fire({
            title: 'Return Order',
            text: 'Are you sure you want to return this order?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, Return Order',
            cancelButtonText: 'No, Keep Order',
            reverseButtons: true
        });

        if (result.isConfirmed) {
             Swal.fire({
                title: 'Processing Return...',
                text: 'Please wait',
                allowOutsideClick: false,
                allowEscapeKey: false,
                showConfirmButton: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            const response = await fetch(`/order/${orderId}/return`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include'
            });

            const data = await response.json();

            if (response.ok && data.success) {
                await Swal.fire({
                    title: 'Return Requested',
                    text: 'Your return request has been submitted successfully',
                    icon: 'success',
                    timer: 2000,
                    showConfirmButton: false
                });
                window.location.reload();
            } else {
                throw new Error(data.message || 'Failed to process return request');
            }
        }
    } catch (error) {
        console.error('Error returning order:', error);
        Swal.fire({
            title: 'Error',
            text: error.message || 'Something went wrong while processing the return'
        });
    }
}
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</body>
</html>
<%- include("../partials/user/footer") %>
<style>
 .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 15px;
}

.row {
    display: flex;
    flex-wrap: wrap;
    margin-right: -15px;
    margin-left: -15px;
}

.col-md-4, .col-md-8, .col-lg-6, .col-lg-8, .col-lg-10 {
    padding-right: 15px;
    padding-left: 15px;
    position: relative;
    width: 100%;
}

.m-auto {
    margin: auto !important;
}

 .col-md-4 {
    flex: 0 0 33.333333%;
    max-width: 33.333333%;
}

.col-md-8 {
    flex: 0 0 66.666667%;
    max-width: 66.666667%;
}

.col-lg-6 {
    flex: 0 0 50%;
    max-width: 50%;
}

.col-lg-10 {
    flex: 0 0 83.333333%;
    max-width: 83.333333%;
}

 .dashboard-menu {
    background: #f5f5f5;
    border: 1px solid #ddd;
    box-shadow: 0 0 20px rgba(0,0,0,0.05);
    margin-bottom: 30px;
    height: 100%;
}

.dashboard-menu ul {
    list-style: none;
    padding: 20px;
    margin: 0;
}

.dashboard-menu .nav-item {
    margin-bottom: 10px;
}

.dashboard-menu .nav-link {
    display: flex;
    align-items: center;
    padding: 12px 20px;
    color: #000;
    text-decoration: none;
    border-radius: 8px;
    transition: all 0.3s ease;
    border-left: 3px solid transparent;
}

.dashboard-menu .nav-link:hover {
    background: #eee;
    border-left-color: #000;
}

.dashboard-menu .nav-link.active {
    background: #eee;
    border-left-color: #000;
    color: #000;
}

.dashboard-menu .nav-link i {
    margin-right: 10px;
    width: 20px;
    text-align: center;
}

/* Dashboard Content */
.dashboard-content {
    background: #f5f5f5;
    border: 1px solid #ddd;
    box-shadow: 0 5px 15px rgba(0,0,0,0.05);
}

.tab-content {
    padding: 20px;
}

/* Card Layouts */
.card {
    margin-bottom: 30px;
    border: none;
    border-radius: 15px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.05);
    background: #f5f5f5;
    border: 1px solid #ddd;
}

.card-header {
    padding: 20px;
    background: #eee;
    color: #000;
    border-radius: 15px 15px 0 0;
    border-bottom: 1px solid #ddd;
}

.card-body {
    padding: 20px;
    background: #f5f5f5;
}

/* Profile Section */
.card-green {
    text-align: center;
    border: 1px solid #ddd;
}

.card-green .card-body {
    padding: 30px 20px;
}

.card-title {
    margin-bottom: 20px;
}

.card-text {
    margin-bottom: 15px;
}

/* Address Section */
.address-card {
    background: #f5f5f5;
    border: 1px solid #ddd;
}

.btn-small {
    background: #eee;
    color: #000;
    border: 1px solid #ddd;
    padding: 5px 15px;
    border-radius: 4px;
    text-decoration: none;
}

.btn-small:hover {
    background: #000;
    color: #fff;
}

/* Wallet Section */
.wallet-section {
    background: #f5f5f5;
}

/* Status Badges */
.badge {
    background: #eee;
    color: #000;
    padding: 5px 10px;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

/* Links */
a {
    color: #000;
    text-decoration: none;
}

a:hover {
    color: #333;
}

/* Utility Classes */
.text-muted {
    color: #666 !important;
}

.border-bottom {
    border-bottom: 1px solid #ddd !important;
}

/* Upload Overlay */
.image-upload-overlay {
    background: rgba(255,255,255,0.9);
}

.upload-label {
    color: #000;
}

.upload-label:hover {
    color: #333;
}

/* Dashboard Content */
.dashboard-content {
    background: #f5f5f5;
    border: 1px solid #ddd;
    box-shadow: 0 5px 15px rgba(0,0,0,0.05);
}

/* Active States */
.nav-link.active {
    background: #eee;
    color: #000;
    font-weight: bold;
}

/* Container Backgrounds */
.container-fluid {
    background: #fff;
}

/* Table Striped */
.table-striped tbody tr:nth-of-type(odd) {
    background-color: #f8f8f8;
}

/* Form Focus States */
.form-control:focus {
    border-color: #000;
    box-shadow: 0 0 0 0.2rem rgba(0,0,0,0.1);
}

/* Button Groups */
.btn-group {
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

/* Card Footer */
.card-footer {
    background: #f8f8f8;
    border-top: 1px solid #ddd;
}

/* Breadcrumb Styles */
.breadcrumb-wrapper {
    background: #f8f8f8;
    border-bottom: 1px solid #ddd;
    padding: 15px 0;
    margin-bottom: 30px;
}

.breadcrumb {
    display: flex;
    align-items: center;
    padding: 0;
    margin: 0;
    list-style: none;
    font-size: 14px;
}

.breadcrumb-item {
    display: flex;
    align-items: center;
}

.breadcrumb-item a {
    color: #666;
    text-decoration: none;
    transition: color 0.3s ease;
}

.breadcrumb-item a:hover {
    color: #000;
}

.breadcrumb-item + .breadcrumb-item {
    padding-left: 10px;
}

.breadcrumb-item + .breadcrumb-item::before {
    content: '/';
    display: inline-block;
    padding-right: 10px;
    color: #999;
}

.breadcrumb-item.active {
    color: #000;
    font-weight: 500;
}

.breadcrumb-icon {
    margin-right: 5px;
    font-size: 12px;
}

/* Orders Section Styles */
.orders-section {
    padding: 20px;
}

.order-card {
    background: #fff;
    border: 1px solid #e5e5e5;
    margin-bottom: 20px;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.order-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}

.order-header {
    padding: 20px;
    background: #f8f9fa;
    border-bottom: 1px solid #e5e5e5;
}

.order-header-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
}

.order-info-item {
    display: flex;
    flex-direction: column;
}

.order-info-label {
    font-size: 0.75rem;
    text-transform: uppercase;
    color: #6c757d;
    margin-bottom: 4px;
    letter-spacing: 0.5px;
}

.order-info-value {
    font-size: 1rem;
    color: #212529;
    font-weight: 500;
}

.order-body {
    padding: 20px;
}

.order-products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 20px;
    margin-bottom: 20px;
}

.product-card {
    display: flex;
    align-items: center;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 8px;
    border: 1px solid #e5e5e5;
}

.product-image {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: 8px;
    margin-right: 15px;
}

.product-details {
    flex: 1;
}

.product-name {
    font-weight: 500;
    color: #212529;
    margin-bottom: 5px;
    font-size: 1rem;
}

.product-meta {
    font-size: 0.875rem;
    color: #6c757d;
}

.order-footer {
    padding: 20px;
    background: #f8f9fa;
    border-top: 1px solid #e5e5e5;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.order-total {
    font-size: 1.25rem;
    font-weight: 600;
    color: #212529;
}

.order-actions {
    display: flex;
    gap: 10px;
}

.btn-order {
    padding: 8px 16px;
    border-radius: 6px;
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 0.3s ease;
}

.btn-view {
    background: #000;
    color: #fff;
    border: none;
}

.btn-view:hover {
    background: #333;
}

.btn-cancel {
    background: #fff;
    color: #dc3545;
    border: 1px solid #dc3545;
}

.btn-cancel:hover {
    background: #dc3545;
    color: #fff;
}

.status-badge {
    display: inline-flex;
    align-items: center;
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.status-pending {
    background: #fff3cd;
    color: #856404;
    border: 1px solid #ffeeba;
}

.status-processing {
    background: #cce5ff;
    color: #004085;
    border: 1px solid #b8daff;
}

.status-shipped {
    background: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.status-delivered {
    background: #d1e7dd;
    color: #0f5132;
    border: 1px solid #badbcc;
}

.status-cancelled {
    background: #f8d7da;
    color: #842029;
    border: 1px solid #f5c2c7;
}

@media (max-width: 768px) {
    .order-header-grid {
        grid-template-columns: 1fr;
        gap: 15px;
    }

    .order-products-grid {
        grid-template-columns: 1fr;
    }

    .order-footer {
        flex-direction: column;
        gap: 15px;
        text-align: center;
    }

    .order-actions {
        width: 100%;
        justify-content: center;
    }
}
</style>
</head>
   

   
          

                          


              


              

<script>

function submitAddressForm() {
    if (!validateAddressForm()) {
        return;
    }

    const formData = {
        name: document.getElementById('address_name').value.trim(),
        houseName: document.getElementById('address_houseName').value.trim(),
        street: document.getElementById('address_street').value.trim(),
        city: document.getElementById('address_city').value.trim(),
        state: document.getElementById('address_state').value,
        pincode: document.getElementById('address_pincode').value.trim(),
        phone: document.getElementById('address_phone').value.trim()
    };

     const submitButton = document.querySelector('#addAddressModal .btn-dark');
    const originalText = submitButton.textContent;
    submitButton.disabled = true;
    submitButton.textContent = 'Adding...';

    fetch('/add-address', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(data => {
                throw new Error(data.message || 'Failed to add address');
            });
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
             const modal = bootstrap.Modal.getInstance(document.getElementById('addAddressModal'));
            modal.hide();
            
             setTimeout(() => {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: data.message || 'Address added successfully',
                    showConfirmButton: false,
                    timer: 1500
                }).then(() => {
                    location.reload();
                });
            }, 300);  
        } else {
            throw new Error(data.message || 'Failed to add address');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to add address. Please try again.'
        });
    })
    .finally(() => {
         submitButton.disabled = false;
        submitButton.textContent = originalText;
    });
}

 document.getElementById('addAddressModal').addEventListener('show.bs.modal', function () {
    const form = document.getElementById('addAddressForm');
    form.reset();
    form.classList.remove('was-validated');
    
     document.getElementById('addAddressModalLabel').textContent = 'Add New Address';
    const submitButton = document.querySelector('#addAddressModal .btn-dark');
    submitButton.textContent = 'Add Address';
    submitButton.onclick = submitAddressForm;
});

 document.getElementById('addAddressModal').addEventListener('hidden.bs.modal', function () {
    const form = document.getElementById('addAddressForm');
    form.reset();
    form.classList.remove('was-validated');
});

 function editAddress(index) {
    fetch(`/get-address/${index}`)
        .then(response => response.json())
        .then(address => {
            document.getElementById('edit_address_index').value = index;
            document.getElementById('edit_address_name').value = address.name;
            document.getElementById('edit_address_houseName').value = address.houseName;
            document.getElementById('edit_address_street').value = address.street;
            document.getElementById('edit_address_city').value = address.city;
            document.getElementById('edit_address_state').value = address.state;
            document.getElementById('edit_address_pincode').value = address.pincode;
            document.getElementById('edit_address_phone').value = address.phone;
            
            new bootstrap.Modal(document.getElementById('editAddressModal')).show();
        })
        .catch(error => {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to load address details'
            });
        });
}

async function updateEditedAddress() {
    if (!validateEditAddressForm()) {
        return;
    }

    const index = document.getElementById('edit_address_index').value;
    const updatedAddress = {
        name: document.getElementById('edit_address_name').value.trim(),
        houseName: document.getElementById('edit_address_houseName').value.trim(),
        street: document.getElementById('edit_address_street').value.trim(),
        city: document.getElementById('edit_address_city').value.trim(),
        state: document.getElementById('edit_address_state').value.trim(),
        pincode: document.getElementById('edit_address_pincode').value.trim(),
        phone: document.getElementById('edit_address_phone').value.trim()
    };

    try {
        const response = await fetch('/update-address', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                index: index,
                address: updatedAddress
            })
        });

        if (response.ok) {
            bootstrap.Modal.getInstance(document.getElementById('editAddressModal')).hide();
            
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Address updated successfully',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                location.reload();
            });
        } else {
            throw new Error('Failed to update address');
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Failed to update address. Please try again.'
        });
    }
}

function validateEditAddressForm() {
    const form = document.getElementById('editAddressForm');
    if (!form.checkValidity()) {
        form.classList.add('was-validated');
        return false;
    }
    
    const pincode = document.getElementById('edit_address_pincode').value.trim();
    const phone = document.getElementById('edit_address_phone').value.trim();
    
    if (pincode.length !== 6 || isNaN(pincode)) {
    document.getElementById('edit_address_pincode').setCustomValidity('Please enter a valid 6-digit pincode');
    form.classList.add('was-validated');
    return false;
} else {
    document.getElementById('edit_address_pincode').setCustomValidity('');  
}

    
    if (!/^\d{10}$/.test(phone)) {
        document.getElementById('edit_address_phone').setCustomValidity('Please enter a valid 10-digit phone number');
        form.classList.add('was-validated');
        return false;
    }
    
    return true;
}
 function deleteAddress(index) {
    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/delete-address/${index}`, {
                method: 'DELETE'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire(
                        'Deleted!',
                        'Your address has been deleted.',
                        'success'
                    ).then(() => {
                        location.reload();
                    });
                } else {
                    throw new Error(data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to delete address'
                });
            });
        }
    });
}

 function validateForm() {
    const name = document.getElementById('name').value;
    const houseName = document.getElementById('houseName').value;
    const street = document.getElementById('street').value;
    const city = document.getElementById('city').value;
    const state = document.getElementById('state').value;
    const pincode = document.getElementById('pincode').value;
    const phone = document.getElementById('phone').value;

     if (!name || !houseName || !street || !city || !state || !pincode || !phone) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'All fields are required'
        });
        return false;
    }

     if (!/^\d{10}$/.test(phone)) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Phone number must be 10 digits'
        });
        return false;
    }

     if (!/^\d{6}$/.test(pincode)) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'PIN code must be 6 digits'
        });
        return false;
    }

    return true;
}

 function validateAddressForm() {
    const name = document.getElementById('address_name').value.trim();
    const houseName = document.getElementById('address_houseName').value.trim();
    const street = document.getElementById('address_street').value.trim();
    const city = document.getElementById('address_city').value.trim();
    const state = document.getElementById('address_state').value;
    const pincode = document.getElementById('address_pincode').value.trim();
    const phone = document.getElementById('address_phone').value.trim();

     if (!name || !houseName || !street || !city || !state || !pincode || !phone) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'All fields are required'
        });
        return false;
    }

     if (!/^[6-9]\d{9}$/.test(phone)) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Phone number must be 10 digits and start with 6-9'
        });
        return false;
    }

     if (!/^\d{6}$/.test(pincode)) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'PIN code must be 6 digits'
        });
        return false;
    }

    return true;
}

 document.querySelectorAll('#addAddressForm input, #addAddressForm select').forEach(input => {
    input.addEventListener('input', function() {
        this.classList.remove('is-invalid');
    });
});

 function validateProfileForm() {
    const name = document.getElementById('name').value.trim();
    const phone = document.getElementById('phone').value.trim();
    
     if (!name || !/^[a-zA-Z\s]{3,50}$/.test(name)) {
        Swal.fire({
            icon: 'error',
            title: 'Invalid Name',
            text: 'Name should be 3-50 characters long and contain only letters and spaces'
        });
        return false;
    }

     if (!phone || !/^[6-9]\d{9}$/.test(phone)) {
        Swal.fire({
            icon: 'error',
            title: 'Invalid Phone Number',
            text: 'Please enter a valid 10-digit mobile number starting with 6-9'
        });
        return false;
    }

    return true;
}

document.getElementById('updateProfileForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
     if (!validateProfileForm()) {
        return;
    }
    
    const formData = {
        name: document.getElementById('name').value.trim(),
        phone: document.getElementById('phone').value.trim()
    };

    fetch('/update-profile', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: data.message
            }).then(() => {
                location.reload();
            });
        } else {
            throw new Error(data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to update profile'
        });
    });
});

 document.getElementById('name').addEventListener('input', function(e) {
    const input = e.target;
    const namePattern = /^[a-zA-Z\s]{0,50}$/;
    
     input.value = input.value.replace(/[^a-zA-Z\s]/g, '');
    
     if (input.value.length > 50) {
        input.value = input.value.substring(0, 50);
    }
});

document.getElementById('phone').addEventListener('input', function(e) {
    const input = e.target;
    
     input.value = input.value.replace(/\D/g, '');
    
     if (input.value.length > 10) {
        input.value = input.value.substring(0, 10);
    }
    
    
     if (input.value.length === 1 && !/^[6-9]$/.test(input.value)) {
        input.value = '';
    }
});

async function cancelOrder(orderId) {
    try {
        const result = await Swal.fire({
            title: 'Cancel Order',
            text: 'Are you sure you want to cancel this order?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, Cancel Order',
            cancelButtonText: 'No, Keep Order',
            reverseButtons: true
        });

        if (result.isConfirmed) {
             Swal.fire({
                title: 'Cancelling Order...',
                text: 'Please wait',
                allowOutsideClick: false,
                allowEscapeKey: false,
                showConfirmButton: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            const response = await fetch(`/order/${orderId}/cancel`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include'
            });

            const data = await response.json();

            if (response.ok && data.success) {
                await Swal.fire({
                    title: 'Order Cancelled',
                    text: 'Your order has been cancelled successfully',
                    icon: 'success',
                    timer: 2000,
                    showConfirmButton: false
                });
                window.location.reload();
            } else {
                throw new Error(data.message || 'Failed to cancel order');
            }
        }
    } catch (error) {
        console.error('Error cancelling order:', error);
        await Swal.fire({
            title: 'Error',
            text: error.message || 'Something went wrong while cancelling the order'
        });
    }
}

async function returnOrder(orderId) {
    try {
        const result = await Swal.fire({
            title: 'Return Order',
            text: 'Are you sure you want to return this order?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, Return Order',
            cancelButtonText: 'No, Keep Order',
            reverseButtons: true
        });

        if (result.isConfirmed) {
             Swal.fire({
                title: 'Processing Return...',
                text: 'Please wait',
                allowOutsideClick: false,
                allowEscapeKey: false,
                showConfirmButton: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            const response = await fetch(`/order/${orderId}/return`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include'
            });

            const data = await response.json();

            if (response.ok && data.success) {
                await Swal.fire({
                    title: 'Return Requested',
                    text: 'Your return request has been submitted successfully',
                    icon: 'success',
                    timer: 2000,
                    showConfirmButton: false
                });
                window.location.reload();
            } else {
                throw new Error(data.message || 'Failed to process return request');
            }
        }
    } catch (error) {
        console.error('Error returning order:', error);
        Swal.fire({
            title: 'Error',
            text: error.message || 'Something went wrong while processing the return'
        });
    }
}
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</body>
</html>
