<%- include("../../views/partials/admin/header.ejs") %>

<style>
    /* Base Styles */
body {
    font-family: 'Arial', sans-serif;
    margin: 0;
    background-color: #f8f9fa;
}


@keyframes bounce {
    from {
        transform: translateY(0px);
    }
    to {
        transform: translateY(-5px);
    }
}

.menu-item.active .menu-link {
    background: #000000;
    color: #ffffff;
}

.menu-item.active .menu-link i {
    color: #ffffff;
}

/* Responsive Sidebar */
@media (max-width: 768px) {
    .navbar-aside {
        width: 70px;
    }

    .navbar-aside:hover {
        width: 260px;
    }

    .menu-link span {
        display: none;
    }

    .navbar-aside:hover .menu-link span {
        display: inline;
    }
}

/* Reset modal positioning */
body.modal-open {
    overflow: hidden;
}

.modal-backdrop {
    position: fixed;
    inset: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.9);
    z-index: 99999;
    display: none;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.modal-backdrop.show {
    opacity: 1;
    display: block;
}

#cropperModal {
    display: none;
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    z-index: 99999;
}

.modal-content {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    background-color: white;
    padding: 15px;
    border-radius: 8px;
    width: 70%;
    max-width: 600px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
}

.cropper-preview-container {
    width: 100%;
    height: 400px;
    background: #f0f0f0;
    margin-bottom: 15px;
    position: relative;
    overflow: hidden;
}

#cropperImage {
    max-height: 100%;
    max-width: 100%;
}

.modal-buttons {
    text-align: right;
    margin-top: 15px;
}

.modal-buttons button {
    margin-left: 8px;
    min-width: 80px;
    padding: 6px 12px;
}

/* Cropper.js specific styles */
.cropper-container {
    direction: ltr;
    font-size: 0;
    line-height: 0;
    position: relative;
    touch-action: none;
    user-select: none;
}

.cropper-wrap-box,
.cropper-canvas,
.cropper-drag-box,
.cropper-crop-box,
.cropper-modal {
    bottom: 0;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
}

.cropper-modal {
    background-color: rgba(0, 0, 0, 0.5);
}

.cropper-view-box {
    display: block;
    height: 100%;
    outline: 1px solid #39f;
    outline-color: rgba(51, 153, 255, 0.75);
    overflow: hidden;
    width: 100%;
}

.cropper-dashed {
    border: 0 dashed #eee;
    display: block;
    opacity: 0.5;
    position: absolute;
}

.cropper-face {
    background-color: transparent !important;
    left: 0;
    top: 0;
    position: absolute;
}

.cropper-line {
    background-color: #39f;
    opacity: 0.5;
}

.cropper-point {
    background-color: #39f;
    height: 5px;
    opacity: 0.75;
    width: 5px;
}

/* Make the selection area transparent */
.cropper-view-box {
    outline: none;
    box-shadow: 0 0 0 1px #39f;
}

.cropper-face {
    background-color: transparent !important;
}

/* Improve visibility of the crop box */
.cropper-crop-box {
    background: none !important;
}

.cropper-point.point-se,
.cropper-point.point-sw,
.cropper-point.point-nw,
.cropper-point.point-ne {
    height: 10px;
    width: 10px;
    opacity: 1;
}

/* Override default styles */
.cropper-view-box,
.cropper-face {
    opacity: 0.1 !important;
}

.cropper-line,
.cropper-point {
    opacity: 0.75 !important;
}

.cropper-bg {
    background-image: none !important;
}

/* Override any conflicting styles */
.cropper-container {
    position: relative !important;
}

.cropper-view-box,
.cropper-face {
    opacity: 1 !important;
}

.cropper-line,
.cropper-point {
    background-color: #fff !important;
}

.cropper-bg {
    background-image: none !important;
}

.cropper-buttons {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    padding: 15px 20px;
    border-top: 1px solid #eee;
}

.btn-crop {
    min-width: 100px;
    padding: 8px 16px;
}

.preview-container {
    margin-top: 10px;
}

.image-preview {
    width: 100%;
    height: 200px;
    object-fit: cover;
    border-radius: 4px;
    display: none;
}

.error-message {
    color: #dc3545;
    font-size: 0.875em;
    margin-top: 0.25rem;
    display: none;
}
.is-invalid {
    border-color: #dc3545 !important;
    animation: shake 0.5s;
}
@keyframes shake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-10px); }
    75% { transform: translateX(10px); }
}

/* Add blur effect wrapper */
.blur-wrapper {
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
    background-color: rgba(255, 255, 255, 0.2);
    z-index: 99998;
    display: none;
}
</style>
<head>
    <meta charset="utf-8">
    <title>RevAge Dashboard</title>
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta property="og:title" content="">
    <meta property="og:type" content="">
    <meta property="og:url" content="">
    <meta property="og:image" content="">
    <!-- Favicon -->
    <link rel="shortcut icon" type="image/x-icon" href="">
   <!---fond-->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.1/css/all.min.css" integrity="sha512-5Hs3dF2AEPkpNAR7UiOHba+lRSJNeM2ECkwxUIxC1Q/FLycGTbNapWXB4tP889k5T5Ju8fs4b1P5z/iB4nMfSQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    
    <link href="/evara-backend/assets/css/main.css" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" href="/evara-backend/assets/imgs">

</head>

<body>
    


    <main class="main-wrap">
        <!-- <header class="main-header navbar"> -->
            <div class="col-search">
               
                </form>
            </div>
            <div class="col-nav">
                <button class="btn btn-icon btn-mobile me-auto" data-trigger="#offcanvas_aside"> <i
                        class="material-icons md-apps"></i> </button>
                <ul class="nav">
                 
                </ul>
            </div>
        </header>
        <head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <link rel="stylesheet" href="/css/style.css">

    <style>
        
    </style>
</head>

<!-- Add blur wrapper -->
<div class="blur-wrapper"></div>
<!-- Cropper Modal -->
<div id="cropperModal">
    <div class="modal-content">
        <div class="cropper-preview-container">
            <img id="cropperImage" src="" alt="Image to crop">
        </div>
        <div class="modal-buttons">
            <button type="button" class="btn btn-secondary" onclick="cancelCrop()">Cancel</button>
            <button type="button" class="btn btn-primary" onclick="cropImage()">Crop & Save</button>
        </div>
    </div>
</div>

<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Add New Product</h2>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-body">
                    <form id="productForm" method="POST" action="/admin/product-add" enctype="multipart/form-data">
                        <!-- Product Name -->
                        <div class="mb-4">
                            <label class="form-label">Product Name</label>
                            <input type="text" name="productName" class="form-control" required
                                   minlength="3" maxlength="100">
                            <div id="productName-error" class="error-message"></div>
                        </div>

                        <!-- Description -->
                        <div class="mb-4">
                            <label class="form-label">Description</label>
                            <textarea name="description" class="form-control" rows="4" required
                                      minlength="10" maxlength="1000"></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>

                        <!-- Prices and Quantity -->
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Regular Price</label>
                                    <input type="number" name="regularPrice" class="form-control" required
                                           min="0" step="0.01">
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Sale Price</label>
                                    <input type="number" name="salePrice" class="form-control"
                                           min="0" step="0.01">
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Quantity</label>
                                    <input type="number" name="quantity" class="form-control" required
                                           min="0" max="10000">
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>

                        <!-- Color -->
                        <div class="mb-4">
                            <label class="form-label">Color</label>
                            <input type="text" name="color" class="form-control" required
                                   minlength="2" maxlength="50">
                            <div id="color-error" class="error-message"></div>
                        </div>

                        <!-- Category -->
                        <div class="mb-4">
                            <label class="form-label">Category</label>
                            <select name="category" class="form-select" required>
                                <option value="">Select Category</option>
                                <% categories.forEach(function(category) { %>
                                    <option value="<%= category._id %>"><%= category.name %></option>
                                <% }); %>
                            </select>
                            <div id="category-error" class="error-message"></div>
                        </div>

                        <!-- Image Upload Section -->
                        <div class="mb-4">
                            <label class="form-label">Product Images (Upload up to 3 images)</label>
                            
                            <!-- Hidden inputs for cropped images -->
                            <input type="hidden" name="croppedImages[]" id="croppedImage1">
                            <input type="hidden" name="croppedImages[]" id="croppedImage2">
                            <input type="hidden" name="croppedImages[]" id="croppedImage3">
                            
                            <!-- Image 1 -->
                            <div class="image-input-container">
                                <i class="fas fa-cloud-upload-alt"></i>
                                <input type="file" name="images" class="form-control" accept="image/*"
                                       onchange="handleImageSelect(this, 'preview1', 0)" required>
                                <small class="text-muted">Main product image (required)</small>
                                <div class="preview-container">
                                    <img id="preview1" class="image-preview">
                                </div>
                            </div>

                            <!-- Image 2 -->
                            <div class="image-input-container">
                                <i class="fas fa-cloud-upload-alt"></i>
                                <input type="file" name="images" class="form-control" accept="image/*"
                                       onchange="handleImageSelect(this, 'preview2', 1)">
                                <small class="text-muted">Additional image (optional)</small>
                                <div class="preview-container">
                                    <img id="preview2" class="image-preview">
                                </div>
                            </div>

                            <!-- Image 3 -->
                            <div class="image-input-container">
                                <i class="fas fa-cloud-upload-alt"></i>
                                <input type="file" name="images" class="form-control" accept="image/*"
                                       onchange="handleImageSelect(this, 'preview3', 2)">
                                <small class="text-muted">Additional image (optional)</small>
                                <div class="preview-container">
                                    <img id="preview3" class="image-preview">
                                </div>
                            </div>
                            <div id="images-error" class="error-message"></div>
                        </div>

                        <button type="submit" class="btn btn-primary">Add Product</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

<script>
    let cropper = null;
    let currentImageIndex = null;

    function handleImageSelect(input, previewId, index) {
        if (input.files && input.files[0]) {
            const file = input.files[0];
            
            if (!file.type.startsWith('image/')) {
                alert('Please select an image file');
                input.value = '';
                return;
            }

            if (file.size > 5 * 1024 * 1024) {
                alert('Image size should not exceed 5MB');
                input.value = '';
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                currentImageIndex = index;
                const modal = document.getElementById('cropperModal');
                const blurWrapper = document.querySelector('.blur-wrapper');
                const cropperImage = document.getElementById('cropperImage');

                cropperImage.src = e.target.result;
                blurWrapper.style.display = 'block';
                modal.style.display = 'block';
                document.body.style.overflow = 'hidden';

                cropperImage.onload = function() {
                    if (cropper) {
                        cropper.destroy();
                    }

                    cropper = new Cropper(cropperImage, {
                        aspectRatio: 1,
                        viewMode: 1,
                        dragMode: 'move',
                        autoCropArea: 0.8,
                        restore: false,
                        guides: true,
                        center: true,
                        highlight: false,
                        cropBoxMovable: true,
                        cropBoxResizable: true,
                        toggleDragModeOnDblclick: false,
                        background: true,
                        modal: true,
                        responsive: true,
                        ready: function() {
                            this.cropper.resize();
                        }
                    });
                };
            };
            reader.readAsDataURL(file);
        }
    }

    function cancelCrop() {
        if (cropper) {
            cropper.destroy();
            cropper = null;
        }

        const modal = document.getElementById('cropperModal');
        const blurWrapper = document.querySelector('.blur-wrapper');
        modal.style.display = 'none';
        blurWrapper.style.display = 'none';
        document.body.style.overflow = 'auto';

        const fileInput = document.querySelectorAll('input[type="file"]')[currentImageIndex];
        fileInput.value = '';

        const preview = document.getElementById(`preview${currentImageIndex + 1}`);
        preview.style.display = 'none';
        preview.src = '';

        document.getElementById(`croppedImage${currentImageIndex + 1}`).value = '';
    }

    function cropImage() {
        if (!cropper) return;

        try {
            const canvas = cropper.getCroppedCanvas({
                width: 800,
                height: 800,
                imageSmoothingEnabled: true,
                imageSmoothingQuality: 'high'
            });

            if (!canvas) return;

            const preview = document.getElementById(`preview${currentImageIndex + 1}`);
            preview.src = canvas.toDataURL('image/jpeg', 0.9);
            preview.style.display = 'block';

            document.getElementById(`croppedImage${currentImageIndex + 1}`).value = canvas.toDataURL('image/jpeg', 0.9);

            cropper.destroy();
            cropper = null;

            const modal = document.getElementById('cropperModal');
            const blurWrapper = document.querySelector('.blur-wrapper');
            modal.style.display = 'none';
            blurWrapper.style.display = 'none';
            document.body.style.overflow = 'auto';
        } catch (error) {
            console.error('Error during crop:', error);
            alert('Failed to crop image. Please try again.');
        }
    }

    // Form validation and submission
    document.getElementById('productForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        try {
            // Show loading state
            Swal.fire({
                title: 'Adding Product...',
                text: 'Please wait',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            // Get form data
            const formData = new FormData(this);

            // Add cropped images if any
            for (let i = 1; i <= 3; i++) {
                const croppedData = document.getElementById(`croppedImage${i}`).value;
                if (croppedData) {
                    formData.append(`croppedImage${i}`, croppedData);
                }
            }

            // Validate form
            const errors = validateForm(formData);
            if (Object.keys(errors).length > 0) {
                Swal.close();
                displayErrors(errors);
                return false;
            }

            console.log('Submitting form data...');
            const response = await fetch(this.action, {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            console.log('Server response:', result);

            if (result.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: result.message,
                    confirmButtonText: 'OK'
                });
                window.location.href = '/admin/products';
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: result.message || 'Failed to add product'
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'An error occurred while adding the product'
            });
        }
    });

    // Form validation function
    function validateForm(formData) {
        const errors = {};

        // Product Name validation
        const productName = formData.get('productName').trim();
        if (!productName) {
            errors.productName = 'Product name is required';
        } else if (productName.length < 3) {
            errors.productName = 'Product name must be at least 3 characters';
        } else if (productName.length > 100) {
            errors.productName = 'Product name must not exceed 100 characters';
        }

        // Description validation
        const description = formData.get('description').trim();
        if (!description) {
            errors.description = 'Description is required';
        } else if (description.length < 10) {
            errors.description = 'Description must be at least 10 characters';
        } else if (description.length > 1000) {
            errors.description = 'Description must not exceed 1000 characters';
        }

        // Regular Price validation
        const regularPrice = parseFloat(formData.get('regularPrice'));
        if (!regularPrice) {
            errors.regularPrice = 'Regular price is required';
        } else if (regularPrice <= 0) {
            errors.regularPrice = 'Regular price must be greater than 0';
        }

        // Sale Price validation
        const salePrice = parseFloat(formData.get('salePrice'));
        if (salePrice && salePrice >= regularPrice) {
            errors.salePrice = 'Sale price must be less than regular price';
        }

        // Quantity validation
        const quantity = parseInt(formData.get('quantity'));
        if (!quantity && quantity !== 0) {
            errors.quantity = 'Quantity is required';
        } else if (quantity < 0) {
            errors.quantity = 'Quantity cannot be negative';
        } else if (quantity > 10000) {
            errors.quantity = 'Quantity must not exceed 10,000';
        }

        // Color validation
        const color = formData.get('color').trim();
        if (!color) {
            errors.color = 'Color is required';
        } else if (color.length < 2) {
            errors.color = 'Color must be at least 2 characters';
        } else if (color.length > 50) {
            errors.color = 'Color must not exceed 50 characters';
        }

        // Category validation
        const category = formData.get('category');
        if (!category) {
            errors.category = 'Please select a category';
        }

        // Image validation
        const croppedImage1 = document.getElementById('croppedImage1').value;
        if (!croppedImage1) {
            errors.images = 'At least one image is required';
        }

        return errors;
    }

    function displayErrors(errors) {
        // Clear all existing error messages
        document.querySelectorAll('.error-message').forEach(el => {
            el.style.display = 'none';
            el.textContent = '';
        });
        document.querySelectorAll('.is-invalid').forEach(el => {
            el.classList.remove('is-invalid');
        });
        
        // Display new error messages
        Object.keys(errors).forEach(field => {
            const errorElement = document.getElementById(`${field}-error`);
            if (errorElement) {
                errorElement.textContent = errors[field];
                errorElement.style.display = 'block';
                
                // Add invalid class to the input
                const input = document.querySelector(`[name="${field}"]`);
                if (input) {
                    input.classList.add('is-invalid');
                }
            }
        });

        // Show error summary if there are errors
        if (Object.keys(errors).length > 0) {
            Swal.fire({
                icon: 'error',
                title: 'Validation Error',
                text: 'Please correct the highlighted fields'
            });
        }
    }
</script>

<%- include("../../views/partials/admin/footer") %>
