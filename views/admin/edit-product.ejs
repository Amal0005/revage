<%- include("../../views/partials/admin/header") %>
<head>
   <style>
       .thumbnails-container {
           display: flex;
           overflow-x: auto;
       }


       .thumbnail {
           margin-right: 10px;
       }
       .input-upload {
   position: relative;
}


.error-message {
           color: red;
           display: none;
       }

.image-upload-container {
    position: relative;
    width: 100%;
    margin-bottom: 15px;
}

.img-preview {
    max-width: 100%;
    height: 150px;
    object-fit: cover;
    margin-bottom: 10px;
    display: none;
}

.image-container {
    position: relative;
}

.remove-btn {
    position: absolute;
    top: 5px;
    right: 5px;
    z-index: 10;
}

.error-message {
    color: #dc3545;
    font-size: 0.875em;
    margin-top: 0.25rem;
    display: none;
}
.is-invalid {
    border-color: #dc3545 !important;
    animation: shake 0.5s;
}
@keyframes shake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-10px); }
    75% { transform: translateX(10px); }
}
.form-control:focus, .form-select:focus {
    border-color: #86b7fe;
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
}
.form-control.is-invalid:focus, .form-select.is-invalid:focus {
    border-color: #dc3545;
    box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25);
}
.image-preview {
    max-width: 150px;
    max-height: 150px;
    margin: 10px;
}
.image-preview-container {
    display: inline-block;
    position: relative;
}
.delete-image {
    position: absolute;
    top: 0;
    right: 0;
    background: rgba(255, 0, 0, 0.7);
    color: white;
    border: none;
    border-radius: 50%;
    padding: 5px 10px;
    cursor: pointer;
}
   </style>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
</head>
   <section class="content-main">
       <div class="row">
           <div class="col-9">
               <div class="content-header">
                   <h2 class="content-title">Edit Product</h2>


               </div>
           </div>
           <div class="col-lg-6">
               <div class="card mb-4">


                   <div class="card-body">
                       <form id="productForm" method="post" action="/admin/edit-product?id=<%=product._id%>" enctype="multipart/form-data">
                           <div class="mb-4">
                               <label for="product_name" class="form-label">Product Name</label>
                               <input type="text" name="productName" value="<%=product.productName%>"
                                   class="form-control border" id="product_name" required>
                                   <div id="productName-error" class="error-message"></div>
                           </div>
                          

                           <div class="mb-4">
                               <label class="form-label">Full description</label>
                               <textarea name="description" class="form-control border" rows="4" required><%=product.description%></textarea>
                               <div id="description-error" class="error-message"></div>
                           </div>
                           <div class="row">
                               <div class="col-lg-4">
                                   <div class="mb-4">
                                       <label class="form-label">Regular price</label>
                                       <input placeholder="₹" name="regularPrice" type="number"
                                           value="<%=product.regularPrice%>" class="form-control border" required>
                                           <div id="regularPrice-error" class="error-message"></div>
                                   </div>
                               </div>
                               <div class="col-lg-4">
                                   <div class="mb-4">
                                       <label class="form-label">Sale price</label>
                                       <input placeholder="₹" name="salePrice" type="number" value="<%=product.salePrice%>"
                                           class="form-control border">
                                           <div id="salePrice-error" class="error-message"></div>
                                   </div>
                               </div>
                               <div class="col-lg-4">
                                   <div class="mb-4">
                                       <label class="form-label">Quantity</label>
                                       <input name="quantity" type="number" value="<%=product.quantity%>"
                                           class="form-control border" required>
                                           <div id="quantity-error" class="error-message"></div>
                                   </div>
                               </div>
                           </div>
                           <div class="row">
                               <div class="col-lg-4">
                                   <div class="mb-4">
                                       <label class="form-label">Color</label>
                                       <input name="color" type="text" value="<%=product.color%>"
                                           class="form-control border" required>
                                           <div id="color-error" class="error-message"></div>
                                   </div>
                               </div>
                           </div>
                           <div class="mb-4">
                               <label class="form-label">Category</label>
                               <select class="form-select border" name="category" required>
                                   <% for(let category of cat) { %>
                                       <option value="<%=category._id%>" <%= product.category.toString() === category._id.toString() ? 'selected' : '' %>>
                                           <%=category.name%>
                                       </option>
                                   <% } %>
                               </select>
                               <div id="category-error" class="error-message"></div>
                           </div>
                           
                           <div class="mb-4">
                               <label class="form-label">Current Images</label>
                               <div class="row">
                                   <% if(product?.productImage && product.productImage.length > 0) { %>
                                       <% product.productImage.forEach(function(image, index) { %>
                                           <div class="col-md-3 mb-3" id="image-<%=image%>" data-image-index="<%=index%>">
                                               <div class="image-preview-container">
                                                   <img src="/uploads/product-images/<%=image%>" class="image-preview">
                                                   <button type="button" class="delete-image" onclick="deleteImage('<%=index%>', '<%=product._id%>')">×</button>
                                               </div>
                                           </div>
                                       <% }); %>
                                   <% } %>
                               </div>
                           </div>
                           
                           <div class="mb-4">
                               <label class="form-label">Add New Images</label>
                               <input type="file" name="images" class="form-control border" accept="image/*" multiple>
                               <small class="text-muted">You can select multiple images. Maximum 4 images total.</small>
                               <div id="images-error" class="error-message"></div>
                           </div>

                           <button type="submit" class="btn btn-primary">Update Product</button>
                       </form>
                   </div>
               </div>
           </div>
       </div>
       </div>
   </section>
   <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
   <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
   <script src="/js/productValidation.js"></script>
<%- include("../../views/partials/admin/footer") %>

<script>
    // Delete image function
    async function deleteImage(imageIndex, productId) {
        try {
            const result = await Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            });

            if (result.isConfirmed) {
                const response = await fetch('/admin/deleteImage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        productId: productId,
                        imageIndex: imageIndex
                    })
                });

                const data = await response.json();
                console.log('Delete response:', data);

                if (data.success) {
                    // Remove the image element from DOM
                    const imageContainer = document.querySelector(`[data-image-index="${imageIndex}"]`);
                    if (imageContainer) {
                        imageContainer.remove();
                    }

                    Swal.fire(
                        'Deleted!',
                        'Image has been deleted.',
                        'success'
                    );
                } else {
                    throw new Error(data.message || 'Failed to delete image');
                }
            }
        } catch (error) {
            console.error('Error deleting image:', error);
            Swal.fire(
                'Error!',
                error.message || 'Failed to delete image',
                'error'
            );
        }
    }

    // Form submission
    document.getElementById('productForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        try {
            // Show loading state
            Swal.fire({
                title: 'Updating Product...',
                text: 'Please wait',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            // Get form data
            const formData = new FormData(this);
            console.log('Form data:', Object.fromEntries(formData));

            // Add cropped images if any
            for (let i = 1; i <= 3; i++) {
                const croppedData = document.getElementById(`croppedImage${i}`)?.value;
                if (croppedData) {
                    formData.append(`croppedImage${i}`, croppedData);
                }
            }

            const response = await fetch(this.action, {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            console.log('Update response:', result);

            if (result.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: result.message || 'Product updated successfully',
                    confirmButtonText: 'OK'
                });
                window.location.href = '/admin/products';
            } else {
                throw new Error(result.message || 'Failed to update product');
            }
        } catch (error) {
            console.error('Error updating product:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: error.message || 'An error occurred while updating the product'
            });
        }
    });

    // Image preview and cropping
    let cropper = null;
    let currentImageIndex = null;

    function handleImageSelect(input, previewId, index) {
        if (input.files && input.files[0]) {
            const reader = new FileReader();
            reader.onload = function(e) {
                currentImageIndex = index;
                showCropper(e.target.result);
            }
            reader.readAsDataURL(input.files[0]);
        }
    }

    function showCropper(imageData) {
        const cropperImage = document.getElementById('cropperImage');
        cropperImage.src = imageData;
        document.getElementById('cropperModal').style.display = 'block';
        
        if (cropper) {
            cropper.destroy();
        }
        
        cropper = new Cropper(cropperImage, {
            aspectRatio: 1,
            viewMode: 2,
            dragMode: 'move',
            autoCropArea: 1,
            restore: false,
            guides: true,
            center: true,
            highlight: false,
            cropBoxMovable: true,
            cropBoxResizable: true,
            toggleDragModeOnDblclick: false,
        });
    }

    function cancelCrop() {
        if (cropper) {
            cropper.destroy();
        }
        document.getElementById('cropperModal').style.display = 'none';
        // Clear the file input
        const fileInputs = document.querySelectorAll('input[type="file"]');
        fileInputs[currentImageIndex].value = '';
    }

    function cropImage() {
        if (!cropper) return;

        const canvas = cropper.getCroppedCanvas({
            width: 440,
            height: 440
        });

        // Update preview
        const preview = document.getElementById(`preview${currentImageIndex + 1}`);
        if (preview) {
            preview.src = canvas.toDataURL();
            preview.style.display = 'block';
        }

        // Store cropped image data
        const croppedImageInput = document.getElementById(`croppedImage${currentImageIndex + 1}`);
        if (croppedImageInput) {
            croppedImageInput.value = canvas.toDataURL();
        }

        // Clean up
        cropper.destroy();
        document.getElementById('cropperModal').style.display = 'none';
    }
</script>