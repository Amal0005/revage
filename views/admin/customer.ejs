<%- include("../../views/partials/admin/header.ejs") %>

<style>
/* Reset and base styles */
body {
    font-family: 'Arial', sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 20px;
    color: #333;
}

.container {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    padding: 20px;
}

/* Content Header */
.content-header {
    border-bottom: 1px solid #e0e0e0;
    padding-bottom: 15px;
    margin-bottom: 20px;
}

.content-title {
    margin: 0;
    color: #000;
    font-weight: 600;
}

/* Search Bar */
.search-bar {
    margin-bottom: 20px;
}

.input-group {
    display: flex;
}

.form-control {
    flex-grow: 1;
    padding: 10px;
    border: 1px solid #d0d0d0;
    border-right: none;
}

.input-group-append .btn {
    background-color: #000;
    color: white;
    border: 1px solid #000;
    padding: 10px 15px;
}

.input-group-append .btn:hover {
    background-color: #333;
}

/* Table Styles */
.table {
    width: 100%;
    border-collapse: collapse;
}

.table thead {
    background-color: #f0f0f0;
}

.table th, .table td {
    padding: 12px;
    border: 1px solid #e0e0e0;
    text-align: left;
    vertical-align: middle;
}

.table tr:nth-child(even) {
    background-color: #f9f9f9;
}

.table tr:hover {
    background-color: #f1f1f1;
}

/* Status Badge Styles */
.badge {
    display: inline-block;
    padding: 6px 12px;
    font-size: 12px;
    font-weight: 600;
    line-height: 1;
    text-align: center;
    white-space: nowrap;
    vertical-align: baseline;
    border-radius: 30px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    transition: all 0.3s ease;
}

.badge-blocked {
    color: rgb(255, 0, 0);
}

.badge-active {
    color: rgb(0, 255, 76);
}

/* Action Buttons */
.btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 8px 16px;
    font-size: 13px;
    font-weight: 500;
    line-height: 1.5;
    text-align: center;
    text-decoration: none;
    vertical-align: middle;
    cursor: pointer;
    user-select: none;
    border: 1px solid transparent;
    border-radius: 6px;
    transition: all 0.2s ease-in-out;
    gap: 6px;
    min-width: 100px;
}

.btn i {
    font-size: 14px;
}

.btn-block {
    color: rgb(255, 0, 0);
}

.btn-block:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 6px rgba(255, 71, 87, 0.2);
}

.btn-unblock {
    color: rgb(47, 255, 0);
}

.btn-unblock:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 6px rgba(46, 213, 115, 0.2);
}

/* Responsive Design */
@media (max-width: 768px) {
    .container {
        padding: 10px;
    }

    .table {
        font-size: 14px;
    }

    .table th, .table td {
        padding: 8px;
    }
}
</style>

 <div class="container">
        <header class="content-header">
            <div class="d-flex justify-content-between align-items-center">
                <h2 class="content-title">Customer Management</h2>
            </div>
        </header>

        <section class="card-header">
            <form id="searchForm" class="search-bar">
                <div class="input-group">
                    <input 
                        type="text" 
                        class="form-control" 
                        value="<%= locals.query || '' %>" 
                        placeholder="Search customers by name, email, or phone..." 
                        name="search"
                        id="searchInput"
                    >
                    <div class="input-group-append">
                        <button class="btn btn-primary" type="submit">
                            <i class="fas fa-search"></i> Search
                        </button>
                    </div>
                </div>
            </form>
        </section>

        <section class="table-container" id="customerTableContainer">
            <% if (data && data.length > 0) { %>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Phone No</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% data.forEach(function(customer) { %>
                            <tr>
                                <td><%= customer.name %></td>
                                <td><%= customer.email %></td>
                                <td><%= customer.phone || 'N/A' %></td>
                                <td>
                                    <span class="badge <%= customer.isBlocked ? 'badge-blocked' : 'badge-active' %>">
                                        <%= customer.isBlocked ? 'Blocked' : 'Active' %>
                                    </span>
                                </td>
                                <td>
                                    <% if(!customer.isBlocked) { %>
                                        <button 
                                            class="btn btn-block" 
                                            onclick="confirmBlock('<%= customer._id %>')"
                                        >
                                            <i class="fas fa-ban"></i> Block
                                        </button>
                                    <% } else { %>
                                        <button 
                                            class="btn btn-unblock" 
                                            onclick="confirmUnblock('<%= customer._id %>')"
                                        >
                                            <i class="fas fa-unlock"></i> Unblock
                                        </button>
                                    <% } %>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            <% } else { %>
                <div class="no-results">
                    <p>No customers found.</p>
                </div>
            <% } %>
        </section>

        <% if (locals.pagination) { %>
            <nav class="pagination-container">
                <ul class="pagination">
                    <% if (pagination.currentPage > 1) { %>
                        <li>
                            <a href="?page=<%= pagination.currentPage - 1 %>&search=<%= locals.query || '' %>">
                                Previous
                            </a>
                        </li>
                    <% } %>
                    <% for(let i = 1; i <= pagination.totalPages; i++) { %>
                        <li class="<%= pagination.currentPage === i ? 'active' : '' %>">
                            <a href="?page=<%= i %>&search=<%= locals.query || '' %>">
                                <%= i %>
                            </a>
                        </li>
                    <% } %>
                    <% if (pagination.currentPage < pagination.totalPages) { %>
                        <li>
                            <a href="?page=<%= pagination.currentPage + 1 %>&search=<%= locals.query || '' %>">
                                Next
                            </a>
                        </li>
                    <% } %>
                </ul>
            </nav>
        <% } %>
    </div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    let debounceTimer;

    // Search functionality with debounce
    document.getElementById('searchForm').addEventListener('submit', function(e) {
        e.preventDefault();
        searchCustomers();
    });

    document.getElementById('searchInput').addEventListener('input', function() {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(searchCustomers, 500);
    });

    async function searchCustomers() {
        const searchQuery = document.getElementById('searchInput').value;
        try {
            const response = await fetch(`/admin/users?search=${encodeURIComponent(searchQuery)}`, {
                method: 'GET',
                headers: {
                    'Accept': 'text/html'  // Changed to accept HTML response
                }
            });

            if (!response.ok) throw new Error('Search failed');

            const html = await response.text();  // Get HTML response
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = html;

            // Extract the table container from the response
            const newTableContainer = tempDiv.querySelector('.table-container');
            if (newTableContainer) {
                document.getElementById('customerTableContainer').innerHTML = newTableContainer.innerHTML;
            } else {
                throw new Error('Could not find table in response');
            }

        } catch (error) {
            console.error('Search error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Search Failed',
                text: 'Failed to search customers. Please try again.'
            });
        }
    }

    async function confirmBlock(userId) {
        const result = await Swal.fire({
            title: 'Block Customer',
            text: "Are you sure you want to block this customer?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#ff7675',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, block',
            cancelButtonText: 'Cancel',
            reverseButtons: true,
            borderRadius: '12px'
        });

        if (result.isConfirmed) {
            try {
                // Using the existing URL structure with query parameters
                const response = await fetch(`/admin/blockCustomer?id=${userId}`, {
                    method: 'GET', // Changed to GET to match existing route
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                if (!response.ok) throw new Error('Failed to block user');
                
                // Update UI immediately without waiting for reload
                const row = document.querySelector(`button[onclick="confirmBlock('${userId}')"]`).closest('tr');
                const statusCell = row.querySelector('td:nth-child(4)');
                const actionCell = row.querySelector('td:last-child');

                statusCell.innerHTML = '<span class="badge badge-blocked">Blocked</span>';
                actionCell.innerHTML = `
                    <button class="btn btn-unblock" onclick="confirmUnblock('${userId}')">
                        <i class="fas fa-unlock"></i> Unblock
                    </button>
                `;

                Swal.fire({
                    icon: 'success',
                    title: 'Customer Blocked',
                    text: 'Customer has been blocked successfully',
                    timer: 1500,
                    showConfirmButton: false
                });
                
            } catch (error) {
                console.error('Block error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Action Failed',
                    text: 'Failed to block customer. Please try again.'
                });
            }
        }
    }

    async function confirmUnblock(userId) {
        const result = await Swal.fire({
            title: 'Unblock Customer',
            text: "Are you sure you want to unblock this customer?",
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#00b894',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, unblock',
            cancelButtonText: 'Cancel',
            reverseButtons: true,
            borderRadius: '12px'
        });

        if (result.isConfirmed) {
            try {
                // Using the existing URL structure with query parameters
                const response = await fetch(`/admin/unblockCustomer?id=${userId}`, {
                    method: 'GET', // Changed to GET to match existing route
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                if (!response.ok) throw new Error('Failed to unblock user');

                // Update UI immediately without waiting for reload
                const row = document.querySelector(`button[onclick="confirmUnblock('${userId}')"]`).closest('tr');
                const statusCell = row.querySelector('td:nth-child(4)');
                const actionCell = row.querySelector('td:last-child');

                statusCell.innerHTML = '<span class="badge badge-active">Active</span>';
                actionCell.innerHTML = `
                    <button class="btn btn-block" onclick="confirmBlock('${userId}')">
                        <i class="fas fa-ban"></i> Block
                    </button>
                `;

                Swal.fire({
                    icon: 'success',
                    title: 'Customer Unblocked',
                    text: 'Customer has been unblocked successfully',
                    timer: 1500,
                    showConfirmButton: false
                });

            } catch (error) {
                console.error('Unblock error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Action Failed',
                    text: 'Failed to unblock customer. Please try again.'
                });
            }
        }
    }
</script>

<%- include("../../views/partials/admin/footer.ejs") %>
