<%- include("../../views/partials/admin/header.ejs") %>

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Arial', sans-serif;
        background-color: #f8f9fa;
        color: #000000;
    }

    .main-content {
        padding: 1.5rem;
        max-width: 100vw;
    }

    /* Header Section */
    .header {
        background: white;
        padding: 1.25rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.04);
        margin-bottom: 1.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .page-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: #2c3e50;
        margin: 0;
    }

    .search-container {
        flex: 0 1 300px;
    }

    .search-input {
        width: 100%;
        padding: 0.6rem 1rem;
        border: 1px solid #e5e5e5;
        border-radius: 8px;
        font-size: 0.9rem;
        transition: all 0.2s;
    }

    .search-input:focus {
        outline: none;
        border-color: #000;
        box-shadow: 0 0 0 2px rgba(0,0,0,0.1);
    }

    /* Table Container */
    .table-container {
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.04);
        overflow: auto;
        max-width: 100%;
    }

    .product-table {
        width: 100%;
        border-collapse: collapse;
        font-size: 0.9rem;
    }

    .product-table th {
        background: #f8f9fa;
        font-weight: 600;
        color: #2c3e50;
        padding: 1rem;
        text-align: left;
        border-bottom: 2px solid #e5e5e5;
    }

    .product-table td {
        padding: 0.875rem 1rem;
        border-bottom: 1px solid #e5e5e5;
    }

    .product-table tr:last-child td {
        border-bottom: none;
    }

    .product-table tr:hover {
        background-color: #f8f9fa;
    }

    /* Product Info */
    .product-info {
        display: flex;
        align-items: center;
        gap: 0.875rem;
        max-width: 300px;
    }

    .product-image {
        width: 45px;
        height: 45px;
        object-fit: cover;
        border-radius: 8px;
        background: #f8f9fa;
    }

    .product-name {
        font-weight: 500;
        color: #2c3e50;
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        line-height: 1.3;
    }

    /* Status Badge */
    .status-badge {
        display: inline-flex;
        align-items: center;
        padding: 0.4rem 0.8rem;
        border-radius: 6px;
        font-size: 0.8rem;
        font-weight: 500;
        line-height: 1;
    }

    .status-active {
        background-color: #e8f5e9;
        color: #2e7d32;
    }

    .status-blocked {
        background-color: #ffebee;
        color: #c62828;
    }

    /* Action Buttons */
    .actions-cell {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .action-btn {
        width: 32px;
        height: 32px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        border: none;
        background: transparent;
        border-radius: 6px;
        color: #2c3e50;
        cursor: pointer;
        transition: all 0.2s;
    }

    .action-btn:hover {
        background-color: #f0f0f0;
        color: #000;
    }

    .offer-badge {
        display: inline-flex;
        align-items: center;
        padding: 0.3rem 0.6rem;
        background-color: #fff3e0;
        color: #ef6c00;
        border-radius: 4px;
        font-size: 0.75rem;
        font-weight: 600;
        margin-left: 0.5rem;
        line-height: 1;
    }

    /* Modal Styles */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1050;
        padding: 1rem;
    }

    .modal-content {
        position: relative;
        background-color: #fff;
        margin: 2rem auto;
        padding: 1.5rem;
        width: 90%;
        max-width: 400px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid #eee;
    }

    .modal-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #2c3e50;
        margin: 0;
    }

    .close-modal {
        background: none;
        border: none;
        color: #666;
        font-size: 1.5rem;
        padding: 0.2rem;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 28px;
        height: 28px;
        border-radius: 6px;
        transition: all 0.2s;
    }

    .close-modal:hover {
        background-color: #f0f0f0;
        color: #000;
    }

    .form-group {
        margin-bottom: 1.25rem;
    }

    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #2c3e50;
        font-size: 0.9rem;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 1px solid #e5e5e5;
        border-radius: 6px;
        font-size: 0.9rem;
        line-height: 1.4;
        transition: all 0.2s;
    }

    .form-control:focus {
        outline: none;
        border-color: #000;
        box-shadow: 0 0 0 2px rgba(0,0,0,0.1);
    }

    .form-control[readonly] {
        background-color: #f8f9fa;
        color: #666;
    }

    .btn-primary {
        width: 100%;
        padding: 0.75rem;
        background: #000;
        color: #fff;
        border: none;
        border-radius: 6px;
        font-size: 0.9rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
    }

    .btn-primary:hover {
        background: #333;
    }

    @media (max-width: 576px) {
        .modal-content {
            margin: 1rem;
            padding: 1rem;
        }

        .modal-title {
            font-size: 1.1rem;
        }

        .form-control {
            padding: 0.6rem 0.8rem;
        }
    }

    @media (max-width: 1200px) {
        .product-info {
            max-width: 250px;
        }
    }

    @media (max-width: 992px) {
        .header {
            flex-direction: column;
            align-items: stretch;
        }
        
        .search-container {
            flex: 1;
        }

        .product-table {
            font-size: 0.85rem;
        }

        .product-info {
            max-width: 200px;
        }
        
        td, th {
            padding: 0.75rem;
        }
    }

    @media (max-width: 768px) {
        .main-content {
            padding: 1rem;
        }

        .product-image {
            width: 40px;
            height: 40px;
        }

        .action-btn {
            width: 28px;
            height: 28px;
        }
    }

    /* Pagination */
    .pagination {
        display: flex;
        justify-content: center;
        gap: 0.4rem;
        margin: 1.5rem 0;
    }

    .page-link {
        min-width: 32px;
        height: 32px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: 0 0.75rem;
        border: 1px solid #e5e5e5;
        border-radius: 6px;
        background: white;
        color: #2c3e50;
        text-decoration: none;
        font-size: 0.9rem;
        transition: all 0.2s;
    }

    .page-link:hover {
        background-color: #f8f9fa;
        border-color: #000;
        color: #000;
    }

    .page-item.active .page-link {
        background-color: #000;
        border-color: #000;
        color: white;
    }
</style>

<main class="main-content">
    <header class="header">
        <h1 class="page-title">Products</h1>
        <div class="search-container">
            <!-- <form action="/admin/products" method="GET">
                <input type="text" name="search" class="search-input" placeholder="Search products...">
            </form> -->
        </div>
    </header>

    <div class="table-container">
        <table class="product-table">
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Category</th>
                    <th>Regular Price</th>
                    <th>Sale Price</th>
                    <th>Quantity</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <% if(data && data.length > 0) { %>
                    <% data.forEach(function(product) { %>
                        <tr>
                            <td>
                                <div class="product-info">
                                    <img src="/uploads/product-images/<%= product.productImage[0] %>" 
                                         alt="<%= product.productName %>"
                                         class="product-image">
                                    <span class="product-name"><%= product.productName %></span>
                                </div>
                            </td>
                            <td><%= product.category ? product.category.name : 'N/A' %></td>
                            <td>₹<%= product.regularPrice.toLocaleString('en-IN') %></td>
                            <td>₹<%= product.salePrice.toLocaleString('en-IN') %></td>
                            <td><%= product.quantity %></td>
                            <td>
                                <span class="status-badge <%= product.isBlocked ? 'status-blocked' : 'status-active' %>">
                                    <%= product.isBlocked ? 'Blocked' : 'Active' %>
                                </span>
                            </td>
                            <td>
                                <div class="actions-cell">
                                    <button class="action-btn" onclick="openEditModal('<%= product._id %>')">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="action-btn" onclick="confirmAction('/admin/<%= product.isBlocked ? 'unblock' : 'block' %>-product?id=<%= product._id %>', '<%= product.isBlocked ? 'unblock' : 'block' %>')">
                                        <i class="fas fa-<%= product.isBlocked ? 'unlock' : 'lock' %>"></i>
                                    </button>
                                    <button class="action-btn" onclick="openOfferModal('<%= product._id %>')">
                                        <i class="fas fa-tag"></i>
                                    </button>
                                    <% if (product.offer) { %>
                                        <div class="d-flex align-items-center">
                                            <span class="offer-badge"><%= product.offer.percentage %>%</span>
                                            <button class="action-btn ms-1" onclick="confirmAction('/admin/remove-offer?id=<%= product._id %>', 'remove offer')">
                                                <i class="fa-solid fa-xmark"></i>
                                            </button>
                                        </div>
                                    <% } %>
                                    
                                </div>
                            </td>
                        </tr>
                    <% }); %>
                <% } else { %>
                    <tr>
                        <td colspan="7" style="text-align: center; padding: 2rem;">
                            No products found
                        </td>
                    </tr>
                <% } %>
            </tbody>
        </table>
    </div>

    <% if (totalPages > 1) { %>
        <nav aria-label="Page navigation">
            <ul class="pagination">
                <% for (let i = 1; i <= totalPages; i++) { %>
                    <li class="page-item <%= (i === currentPage) ? 'active' : '' %>">
                        <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                    </li>
                <% } %>
            </ul>
        </nav>
    <% } %>
</main>

<!-- Offer Modal -->
<div id="offerModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 class="modal-title">Offer</h2>
            <button type="button" class="close-modal" onclick="closeOfferModal()">×</button>
        </div>
        <form id="offerForm">
            <input type="hidden" id="productId" name="productId">
            
            <div class="form-group">
                <label for="percentage" class="form-label">Offer Percentage (%)</label>
                <input type="number" class="form-control" id="percentage" name="percentage" min="1" max="99"  
                       oninput="validateOffer(this)">
                <small class="text-muted">Enter a value between 1 and 99</small>
                <div class="invalid-feedback">Please enter a valid percentage between 1 and 99</div>
            </div>

            <div class="form-group">
                <label for="startDate" class="form-label">Start Date</label>
                <input type="datetime-local" class="form-control" id="startDate" name="startDate" 
                       onchange="validateDates()">
                <div class="invalid-feedback">Start date cannot be in the past</div>
            </div>

            <div class="form-group">
                <label for="endDate" class="form-label">End Date</label>
                <input type="datetime-local" class="form-control" id="endDate" name="endDate" 
                       onchange="validateDates()">
                <div class="invalid-feedback">End date must be after start date</div>
            </div>

            <div class="text-end mt-4">
                <button type="button" class="btn btn-secondary" onclick="closeOfferModal()">Cancel</button>
                <button type="submit" class="btn btn-primary">Add Offer</button>
            </div>
        </form>
    </div>
</div>

<!-- Edit Product Modal -->
<div id="editProductModal" class="modal">
    <div class="modal-content" style="max-width: 800px;">
        <div class="modal-header">
            <h2 class="modal-title">Edit Product</h2>
            <button type="button" class="close-modal" onclick="closeEditModal()">×</button>
        </div>
        <form id="editProductForm" enctype="multipart/form-data">
            <input type="hidden" id="editProductId" name="productId">
            
            <div class="form-group">
                <label for="editProductName" class="form-label">Product Name</label>
                <input type="text" class="form-control" id="editProductName" name="productName" 
                       oninput="validateProductName(this)" minlength="3">
                <div class="invalid-feedback">Product name must be at least 3 characters long</div>
            </div>

            <div class="form-group">
                <label for="editDescription" class="form-label">Description</label>
                <textarea class="form-control" id="editDescription" name="description" rows="3"
                         oninput="validateDescription(this)" minlength="10"></textarea>
                <div class="invalid-feedback">Description must be at least 10 characters long</div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="editCategory" class="form-label">Category</label>
                        <select class="form-control" id="editCategory" name="category"
                                onchange="validateSelect(this)">
                            <% cat.forEach(function(category) { %>
                                <option value="<%= category._id %>"><%= category.name %></option>
                            <% }); %>
                        </select>
                        <div class="invalid-feedback">Please select a category</div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="editColor" class="form-label">Color</label>
                        <input type="text" class="form-control" id="editColor" name="color"
                               oninput="validateColor(this)">
                        <div class="invalid-feedback">Please enter a valid color</div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="editRegularPrice" class="form-label">Regular Price</label>
                        <input type="number" class="form-control" id="editRegularPrice" name="regularPrice" min="0"
                               oninput="validatePrice(this, 'editSalePrice')">
                        <div class="invalid-feedback">Price must be greater than 0</div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="editSalePrice" class="form-label">Sale Price</label>
                        <input type="number" class="form-control" id="editSalePrice" name="salePrice" min="0"
                               oninput="validateSalePrice(this, 'editRegularPrice')">
                        <div class="invalid-feedback">Sale price must be less than regular price</div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="editQuantity" class="form-label">Quantity</label>
                        <input type="number" class="form-control" id="editQuantity" name="quantity" min="0"
                               oninput="validateQuantity(this)">
                        <div class="invalid-feedback">Quantity must be 0 or greater</div>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label class="form-label">Current Images</label>
                <div id="currentImages" class="d-flex gap-2 mb-3"></div>
            </div>

            <div class="form-group">
                <label for="editImages" class="form-label">Add New Images</label>
                <input type="file" class="form-control" id="editImages" name="images" multiple accept="image/*">
                <small class="text-muted">You can select up to 4 images. Each image should be less than 5MB.</small>
            </div>

            <div class="text-end mt-4">
                <button type="button" class="btn btn-secondary" onclick="closeEditModal()">Cancel</button>
                <button type="submit" class="btn-primary">Save Changes</button>
            </div>
        </form>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    let selectedProductId = null;

    function confirmAction(url, action) {
        Swal.fire({
            title: `Are you sure you want to ${action} this product?`,
            text: `This will ${action} the product from your store.`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#000000',
            cancelButtonColor: '#6c757d',
            confirmButtonText: `Yes, ${action} it!`,
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(url)
                    .then(response => {
                        if (response.ok) {
                            Swal.fire({
                                title: 'Success!',
                                text: `Product has been ${action}ed successfully.`,
                                icon: 'success',
                                confirmButtonColor: '#000000',
                                timer: 1500,
                                showConfirmButton: false
                            }).then(() => {
                                window.location.reload();
                            });
                        } else {
                            throw new Error('Failed to update product status');
                        }
                    })
                    .catch(error => {
                        Swal.fire({
                            title: 'Error!',
                            text: error.message,
                            icon: 'error',
                            confirmButtonColor: '#000000'
                        });
                    });
            }
        });
    }

    function openOfferModal(productId) {
        selectedProductId = productId;
        document.getElementById('productId').value = productId;
        document.getElementById('offerModal').style.display = 'block';
    }

    function closeOfferModal() {
        document.getElementById('offerModal').style.display = 'none';
        document.getElementById('offerForm').reset();
    }

    function openEditModal(productId) {
        document.getElementById('editProductModal').style.display = 'block';
        document.getElementById('editProductId').value = productId;
        
        // Fetch product details
        fetch(`/admin/get-product/${productId}`)
            .then(response => response.json())
            .then(product => {
                document.getElementById('editProductName').value = product.productName;
                document.getElementById('editDescription').value = product.description;
                document.getElementById('editCategory').value = product.category._id;
                document.getElementById('editColor').value = product.color;
                document.getElementById('editRegularPrice').value = product.regularPrice;
                document.getElementById('editSalePrice').value = product.salePrice || '';
                document.getElementById('editQuantity').value = product.quantity;

                // Display current images
                const currentImagesDiv = document.getElementById('currentImages');
                currentImagesDiv.innerHTML = '';
                product.productImage.forEach((image, index) => {
                    const imgContainer = document.createElement('div');
                    imgContainer.className = 'position-relative';
                    imgContainer.innerHTML = `
                        <img src="/uploads/product-images/${image}" alt="Product Image ${index + 1}" 
                             style="width: 100px; height: 100px; object-fit: cover;">
                        <button type="button" class="btn btn-danger btn-sm position-absolute top-0 end-0"
                                onclick="deleteImage('${product._id}', '${image}')">×</button>
                    `;
                    currentImagesDiv.appendChild(imgContainer);
                });
            })
            .catch(error => {
                console.error('Error fetching product:', error);
                Swal.fire({
                    title: 'Error!',
                    text: 'Failed to fetch product details',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            });
    }

    function closeEditModal() {
        document.getElementById('editProductModal').style.display = 'none';
        document.getElementById('editProductForm').reset();
        document.getElementById('currentImages').innerHTML = '';
    }

    function validateOffer(input) {
        const value = parseInt(input.value);
        if (value < 1 || value > 99 || isNaN(value)) {
            input.classList.add('is-invalid');
            input.classList.remove('is-valid');
            return false;
        } else {
            input.classList.remove('is-invalid');
            input.classList.add('is-valid');
            return true;
        }
    }

    function validateDates() {
        const startDateInput = document.getElementById('startDate');
        const endDateInput = document.getElementById('endDate');
        const startDate = new Date(startDateInput.value);
        const endDate = new Date(endDateInput.value);
        const now = new Date();

        // Remove previous validation classes
        startDateInput.classList.remove('is-invalid', 'is-valid');
        endDateInput.classList.remove('is-invalid', 'is-valid');

        // Validate start date
        if (startDate < now) {
            startDateInput.classList.add('is-invalid');
            return false;
        } else {
            startDateInput.classList.add('is-valid');
        }

        // Validate end date
        if (endDate <= startDate) {
            endDateInput.classList.add('is-invalid');
            return false;
        } else {
            endDateInput.classList.add('is-valid');
        }

        return true;
    }

    function validateProductName(input) {
        if (input.value.length < 3) {
            input.classList.add('is-invalid');
            input.classList.remove('is-valid');
            return false;
        } else {
            input.classList.remove('is-invalid');
            input.classList.add('is-valid');
            return true;
        }
    }

    function validateDescription(input) {
        if (input.value.length < 10) {
            input.classList.add('is-invalid');
            input.classList.remove('is-valid');
            return false;
        } else {
            input.classList.remove('is-invalid');
            input.classList.add('is-valid');
            return true;
        }
    }

    function validateSelect(select) {
        if (!select.value) {
            select.classList.add('is-invalid');
            select.classList.remove('is-valid');
            return false;
        } else {
            select.classList.remove('is-invalid');
            select.classList.add('is-valid');
            return true;
        }
    }

    function validateColor(input) {
        if (!input.value.trim()) {
            input.classList.add('is-invalid');
            input.classList.remove('is-valid');
            return false;
        } else {
            input.classList.remove('is-invalid');
            input.classList.add('is-valid');
            return true;
        }
    }

    function validatePrice(input, salePriceId) {
        const value = parseFloat(input.value);
        const salePrice = document.getElementById(salePriceId);
        
        if (value <= 0) {
            input.classList.add('is-invalid');
            input.classList.remove('is-valid');
            return false;
        } else {
            input.classList.remove('is-invalid');
            input.classList.add('is-valid');
            if (salePrice.value) {
                validateSalePrice(salePrice, input.id);
            }
            return true;
        }
    }

    function validateSalePrice(input, regularPriceId) {
        const salePrice = parseFloat(input.value);
        const regularPrice = parseFloat(document.getElementById(regularPriceId).value);
        
        if (salePrice && (salePrice >= regularPrice || salePrice < 0)) {
            input.classList.add('is-invalid');
            input.classList.remove('is-valid');
            return false;
        } else {
            input.classList.remove('is-invalid');
            input.classList.add('is-valid');
            return true;
        }
    }

    function validateQuantity(input) {
        const value = parseInt(input.value);
        if (value < 0 || isNaN(value)) {
            input.classList.add('is-invalid');
            input.classList.remove('is-valid');
            return false;
        } else {
            input.classList.remove('is-invalid');
            input.classList.add('is-valid');
            return true;
        }
    }

    function validateEditForm() {
        const productName = document.getElementById('editProductName');
        const description = document.getElementById('editDescription');
        const category = document.getElementById('editCategory');
        const color = document.getElementById('editColor');
        const regularPrice = document.getElementById('editRegularPrice');
        const salePrice = document.getElementById('editSalePrice');
        const quantity = document.getElementById('editQuantity');

        const isValid = 
            validateProductName(productName) &&
            validateDescription(description) &&
            validateSelect(category) &&
            validateColor(color) &&
            validatePrice(regularPrice, 'editSalePrice') &&
            (!salePrice.value || validateSalePrice(salePrice, 'editRegularPrice')) &&
            validateQuantity(quantity);

        return isValid;
    }

    document.getElementById('offerForm').addEventListener('submit', async function(e) {
        e.preventDefault();

        // Validate all fields before submission
        const percentageInput = document.getElementById('percentage');
        if (!validateOffer(percentageInput) || !validateDates()) {
            Swal.fire({
                title: 'Validation Error',
                text: 'Please check all fields and try again',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }
        
        const formData = {
            productId: document.getElementById('productId').value,
            percentage: percentageInput.value,
            startDate: document.getElementById('startDate').value,
            endDate: document.getElementById('endDate').value
        };

        try {
            const response = await fetch('/admin/add-offer', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });

            const data = await response.json();

            if (response.ok) {
                Swal.fire({
                    title: 'Success!',
                    text: 'Offer added successfully',
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.reload();
                    }
                });
            } else {
                throw new Error(data.error || 'Failed to add offer');
            }
        } catch (error) {
            Swal.fire({
                title: 'Error!',
                text: error.message,
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }

        closeOfferModal();
    });

    document.getElementById('editProductForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        if (!validateEditForm()) {
            Swal.fire({
                title: 'Validation Error',
                text: 'Please check all fields and try again',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }

        const formData = new FormData(this);
        
        try {
            const response = await fetch('/admin/edit-product', {
                method: 'POST',
                body: formData
            });

            const data = await response.json();

            if (response.ok) {
                Swal.fire({
                    title: 'Success!',
                    text: 'Product updated successfully',
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.reload();
                    }
                });
            } else {
                throw new Error(data.error || 'Failed to update product');
            }
        } catch (error) {
            console.error('Error updating product:', error);
            Swal.fire({
                title: 'Error!',
                text: error.message,
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    });

    async function deleteImage(productId, imageName) {
        try {
            const response = await fetch('/admin/deleteImage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ productId, imageName })
            });

            if (response.ok) {
                // Refresh the current images display
                openEditModal(productId);
            } else {
                throw new Error('Failed to delete image');
            }
        } catch (error) {
            Swal.fire({
                title: 'Error!',
                text: error.message,
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    }

    // Close modal when clicking outside
    window.onclick = function(event) {
        const modal = document.getElementById('offerModal');
        if (event.target == modal) {
            closeOfferModal();
        }
    }
</script>

<%- include("../../views/partials/admin/footer") %>
